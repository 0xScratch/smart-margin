{
  "address": "0xB2e8d9832C8a22C6fB6D2c92c7E2a69d654749CB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_version",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_marginAsset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_addressResolver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_marginBaseSettings",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_ops",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "NewAccount",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressResolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "contract MarginBase",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marginAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marginBaseSettings",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "newAccount",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ops",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdb715f6d15715dd25b1bf9f7314c52439172af4448b0275754b4ad6dabde84bb",
  "receipt": {
    "to": null,
    "from": "0xF52ab981cFdc5B64ce5B628af656121F4e15Aca3",
    "contractAddress": "0xB2e8d9832C8a22C6fB6D2c92c7E2a69d654749CB",
    "transactionIndex": 0,
    "gasUsed": "5059114",
    "logsBloom": "0x
    "blockHash": "0x62e30427e8abb1352a2670350c620914519d0335cea14392ffbe6ca14f18b849",
    "transactionHash": "0xdb715f6d15715dd25b1bf9f7314c52439172af4448b0275754b4ad6dabde84bb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5020452,
        "transactionHash": "0xdb715f6d15715dd25b1bf9f7314c52439172af4448b0275754b4ad6dabde84bb",
        "address": "0xb968F3fC11bbfc8aFBEBE8a61749E8A5f4798123",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b2e8d9832c8a22c6fb6d2c92c7e2a69d654749cb"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x62e30427e8abb1352a2670350c620914519d0335cea14392ffbe6ca14f18b849"
      }
    ],
    "blockNumber": 5020452,
    "cumulativeGasUsed": "5059114",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1.0.0",
    "0xaA5068dC2B3AADE533d3e52C6eeaadC6a8154c57",
    "0xb08b62e1cdfd37eCCd69A9ACe67322CCF801b3A6",
    "0x026B0DA8B453967D39227748066Eb094a415b696",
    "0xB3f5503f93d5Ef84b06993a1975B9D21B962892F"
  ],
  "numDeployments": 3,
  "solcInputHash": "bebb15a09aeeff04079d4860538428a9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_version\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_marginAsset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressResolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marginBaseSettings\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_ops\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NewAccount\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressResolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"contract MarginBase\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginBaseSettings\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newAccount\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ops\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_addressResolver\":\": contract address for synthetix address resolver\",\"_marginAsset\":\": token contract address used for account margin\",\"_marginBaseSettings\":\": contract address for MarginBase account settings\",\"_ops\":\": contract address for gelato ops -- must be payable\",\"_version\":\": version of contract\"}},\"newAccount()\":{\"details\":\"this contract is the initial owner of cloned MarginBase, but ownership is transferred after successful initialization\"}},\"title\":\"Kwenta MarginBase Factory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addressResolver()\":{\"notice\":\"synthetix address resolver\"},\"constructor\":{\"notice\":\"deploy MarginBase implementation to later be cloned\"},\"implementation()\":{\"notice\":\"MarginBase contract acting as user's account\"},\"marginAsset()\":{\"notice\":\"ERC20 token used to interact with markets\"},\"marginBaseSettings()\":{\"notice\":\"settings for MarginBase accounts\"},\"newAccount()\":{\"notice\":\"clone MarginBase (i.e. create new account for user)\"},\"ops()\":{\"notice\":\"gelato ops\"}},\"notice\":\"Factory which enables deploying a MarginBase account for any user \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarginAccountFactory.sol\":\"MarginAccountFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MarginAccountFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"./utils/MinimalProxyFactory.sol\\\";\\nimport \\\"./MarginBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Kwenta MarginBase Factory\\n/// @author JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\\n/// @notice Factory which enables deploying a MarginBase account for any user \\ncontract MarginAccountFactory is MinimalProxyFactory {\\n    \\n    string public version; // format: (0.1.0)\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Immutables\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice MarginBase contract acting as user's account\\n    MarginBase public immutable implementation;\\n\\n    /// @notice ERC20 token used to interact with markets\\n    IERC20 public immutable marginAsset;\\n\\n    /// @notice synthetix address resolver\\n    address public immutable addressResolver;\\n\\n    /// @notice settings for MarginBase accounts\\n    address public marginBaseSettings;\\n    \\n    /// @notice gelato ops\\n    address payable public immutable ops;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    event NewAccount(address indexed owner, address account);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Constructor\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice deploy MarginBase implementation to later be cloned\\n    /// @param _version: version of contract\\n    /// @param _marginAsset: token contract address used for account margin\\n    /// @param _addressResolver: contract address for synthetix address resolver\\n    /// @param _marginBaseSettings: contract address for MarginBase account settings\\n    /// @param _ops: contract address for gelato ops -- must be payable\\n    constructor(\\n        string memory _version,\\n        address _marginAsset,\\n        address _addressResolver,\\n        address _marginBaseSettings,\\n        address payable _ops\\n    ) {\\n        version = _version;\\n        implementation = new MarginBase();\\n        marginAsset = IERC20(_marginAsset);\\n        addressResolver = _addressResolver;\\n\\n        /// @dev MarginBaseSettings must exist prior to MarginAccountFactory\\n        marginBaseSettings = _marginBaseSettings;\\n\\n        ops = _ops;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Account Deployment\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice clone MarginBase (i.e. create new account for user)\\n    /// @dev this contract is the initial owner of cloned MarginBase,\\n    /// but ownership is transferred after successful initialization\\n    function newAccount() external returns (address) {\\n        MarginBase account = MarginBase(\\n            _cloneAsMinimalProxy(address(implementation), \\\"Creation failure\\\")\\n        );\\n        account.initialize(address(marginAsset), addressResolver, marginBaseSettings, ops);\\n        account.transferOwnership(msg.sender);\\n\\n        emit NewAccount(msg.sender, address(account));\\n        return address(account);\\n    }\\n}\\n\",\"keccak256\":\"0x7f5fe4ff32154d1f0c24ad795cc371a3e6f4b807954331cf44c05c5f362b9264\",\"license\":\"GPL-3.0-or-later\"},\"contracts/MarginBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IAddressResolver.sol\\\";\\nimport \\\"./interfaces/IFuturesMarket.sol\\\";\\nimport \\\"./interfaces/IFuturesMarketManager.sol\\\";\\nimport \\\"./interfaces/IExchangeRates.sol\\\";\\nimport \\\"./interfaces/IMarginBaseTypes.sol\\\";\\nimport \\\"./utils/OpsReady.sol\\\";\\nimport \\\"./utils/MinimalProxyable.sol\\\";\\nimport \\\"./MarginBaseSettings.sol\\\";\\n\\n/// @title Kwenta MarginBase Account\\n/// @author JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\\n/// @notice Flexible, minimalist, and gas-optimized cross-margin enabled account\\n/// for managing perpetual futures positions\\ncontract MarginBase is MinimalProxyable, OpsReady, IMarginBaseTypes {\\n    /*///////////////////////////////////////////////////////////////\\n                                Constants\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice tracking code used when modifying positions\\n    bytes32 private constant TRACKING_CODE = \\\"KWENTA\\\";\\n\\n    /// @notice name for futures market manager, needed for fetching market key\\n    bytes32 private constant FUTURES_MANAGER = \\\"FuturesMarketManager\\\";\\n\\n    /// @notice max BPS\\n    uint256 private constant MAX_BPS = 10000;\\n\\n    // constant for sUSD currency key\\n    bytes32 private constant SUSD = \\\"sUSD\\\";\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                State\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice settings for MarginBase account\\n    MarginBaseSettings public marginBaseSettings;\\n\\n    /// @notice synthetix address resolver\\n    IAddressResolver private addressResolver;\\n\\n    /// @notice synthetix futures market manager\\n    IFuturesMarketManager private futuresManager;\\n\\n    /// @notice token contract used for account margin\\n    IERC20 public marginAsset;\\n\\n    /// @notice margin locked for future events (ie. limit orders)\\n    uint256 public committedMargin;\\n\\n    /// @notice market keys that the account has active positions in\\n    bytes32[] public activeMarketKeys;\\n\\n    /// @notice market keys mapped to active market positions\\n    mapping(bytes32 => ActiveMarketPosition) public activeMarketPositions;\\n\\n    /// @notice limit orders\\n    mapping(uint256 => Order) public orders;\\n\\n    /// @notice sequentially id orders\\n    uint256 public orderId;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice emitted after a successful deposit\\n    /// @param user: the address that deposited into account\\n    /// @param amount: amount of marginAsset to deposit into marginBase account\\n    event Deposit(address indexed user, uint256 amount);\\n\\n    /// @notice emitted after a successful withdrawal\\n    /// @param user: the address that withdrew from account\\n    /// @param amount: amount of marginAsset to withdraw from marginBase account\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Modifiers\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice helpful modifier to check non-zero values\\n    /// @param value: value to check if zero\\n    modifier notZero(uint256 value, bytes32 valueName) {\\n        /// @notice value cannot be zero\\n        if (value == 0) {\\n            revert ValueCannotBeZero(valueName);\\n        }\\n        _;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Errors\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice amount deposited/withdrawn into/from account cannot be zero\\n    /// @param valueName: name of the variable that cannot be zero\\n    error ValueCannotBeZero(bytes32 valueName);\\n\\n    /// @notice position with given marketKey does not exist\\n    /// @param marketKey: key for synthetix futures market\\n    error MissingMarketKey(bytes32 marketKey);\\n\\n    /// @notice limit size of new position specs passed into distribute margin\\n    /// @param numberOfNewPositions: number of new position specs\\n    error MaxNewPositionsExceeded(uint256 numberOfNewPositions);\\n\\n    /// @notice exceeds useable margin\\n    /// @param available: amount of useable margin asset\\n    /// @param required: amount of margin asset required\\n    error InsufficientFreeMargin(uint256 available, uint256 required);\\n\\n    /// @notice cannot execute invalid order\\n    error OrderInvalid();\\n\\n    /// @notice call to transfer ETH on withdrawal fails\\n    error EthWithdrawalFailed();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Constructor & Initializer\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice constructor never used except for first CREATE\\n    // solhint-disable-next-line\\n    constructor() MinimalProxyable() {}\\n\\n    /// @notice initialize contract (only once) and transfer ownership to caller\\n    /// @param _marginAsset: token contract address used for account margin\\n    /// @param _addressResolver: contract address for synthetix address resolver\\n    /// @param _marginBaseSettings: contract address for MarginBase account settings\\n    /// @param _ops: gelato ops address\\n    function initialize(\\n        address _marginAsset,\\n        address _addressResolver,\\n        address _marginBaseSettings,\\n        address payable _ops\\n    ) external initOnce {\\n        marginAsset = IERC20(_marginAsset);\\n        addressResolver = IAddressResolver(_addressResolver);\\n        futuresManager = IFuturesMarketManager(\\n            addressResolver.requireAndGetAddress(\\n                FUTURES_MANAGER,\\n                \\\"MarginBase: Could not get Futures Market Manager\\\"\\n            )\\n        );\\n        marginAsset = IERC20(_marginAsset);\\n\\n        /// @dev MarginBaseSettings must exist prior to MarginBase account creation\\n        marginBaseSettings = MarginBaseSettings(_marginBaseSettings);\\n\\n        /// @dev the Ownable constructor is never called when we create minimal proxies\\n        _transferOwnership(msg.sender);\\n\\n        ops = _ops;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Views\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice get number of active market positions account has\\n    /// @return number of positions which are currently active for account\\n    function getNumberOfActivePositions() external view returns (uint256) {\\n        return activeMarketKeys.length;\\n    }\\n\\n    /// @notice get all active market positions\\n    /// @return positions which are currently active for account (ActiveMarketPosition structs)\\n    function getAllActiveMarketPositions()\\n        external\\n        view\\n        returns (ActiveMarketPosition[] memory)\\n    {\\n        ActiveMarketPosition[] memory positions = new ActiveMarketPosition[](\\n            activeMarketKeys.length\\n        );\\n\\n        // there should never be more than 65535 activeMarketKeys\\n        for (uint16 i = 0; i < activeMarketKeys.length; i++) {\\n            positions[i] = (activeMarketPositions[activeMarketKeys[i]]);\\n        }\\n\\n        return positions;\\n    }\\n\\n    /// @notice the current withdrawable or usable balance\\n    function freeMargin() public view returns (uint256) {\\n        return marginAsset.balanceOf(address(this)) - committedMargin;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Account Deposit & Withdraw\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @param _amount: amount of marginAsset to deposit into marginBase account\\n    function deposit(uint256 _amount)\\n        external\\n        notZero(_amount, \\\"_amount\\\")\\n        onlyOwner\\n    {\\n        // transfer in margin asset from user\\n        // (will revert if user does not have amount specified)\\n        require(\\n            marginAsset.transferFrom(owner(), address(this), _amount),\\n            \\\"MarginBase: deposit failed\\\"\\n        );\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /// @param _amount: amount of marginAsset to withdraw from marginBase account\\n    function withdraw(uint256 _amount)\\n        external\\n        notZero(_amount, \\\"_amount\\\")\\n        onlyOwner\\n    {\\n        // make sure committed margin isn't withdrawn\\n        if (_amount > freeMargin()) {\\n            revert InsufficientFreeMargin(freeMargin(), _amount);\\n        }\\n\\n        // transfer out margin asset to user\\n        // (will revert if account does not have amount specified)\\n        require(\\n            marginAsset.transfer(owner(), _amount),\\n            \\\"MarginBase: withdraw failed\\\"\\n        );\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /// @notice allow users to withdraw ETH deposited for keeper fees\\n    /// @param _amount: amount to withdraw\\n    function withdrawEth(uint256 _amount) external onlyOwner {\\n        (bool success, ) = payable(owner()).call{value: _amount}(\\\"\\\");\\n        if (!success) {\\n            revert EthWithdrawalFailed();\\n        }\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Margin Distribution\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice distribute margin across all/some positions specified via _newPositions\\n    /// @dev _newPositions may contain any number of new or existing positions\\n    /// @dev close and withdraw all margin from position if resulting position size is zero post trade\\n    /// @param _newPositions: an array of UpdateMarketPositionSpec's used to modify active market positions\\n    function distributeMargin(UpdateMarketPositionSpec[] memory _newPositions)\\n        external\\n        onlyOwner\\n    {\\n        _distributeMargin(_newPositions);\\n    }\\n\\n    function _distributeMargin(UpdateMarketPositionSpec[] memory _newPositions)\\n        internal\\n    {\\n        /// @notice limit size of new position specs passed into distribute margin\\n        if (_newPositions.length > type(uint8).max) {\\n            revert MaxNewPositionsExceeded(_newPositions.length);\\n        }\\n\\n        /// @notice tracking variable for calculating fee(s)\\n        uint256 totalSizeDeltaInUSD = 0;\\n\\n        // for each new position in _newPositions, distribute margin accordingly and update state\\n        for (uint8 i = 0; i < _newPositions.length; i++) {\\n            // define market via _marketKey\\n            IFuturesMarket market = futuresMarket(_newPositions[i].marketKey);\\n\\n            if (_newPositions[i].marginDelta < 0) {\\n                /// @notice remove margin from market and potentially adjust position size\\n                totalSizeDeltaInUSD += modifyPositionForMarketAndWithdraw(\\n                    _newPositions[i].marginDelta,\\n                    _newPositions[i].sizeDelta,\\n                    _newPositions[i].marketKey,\\n                    market\\n                );\\n            } else if (_newPositions[i].marginDelta > 0) {\\n                /// @notice deposit margin into market and potentially adjust position size\\n                totalSizeDeltaInUSD += depositAndModifyPositionForMarket(\\n                    _newPositions[i].marginDelta,\\n                    _newPositions[i].sizeDelta,\\n                    _newPositions[i].marketKey,\\n                    market\\n                );\\n            } else if (_newPositions[i].sizeDelta != 0) {\\n                /// @notice adjust position size\\n                /// @notice no margin deposited nor withdrawn from market\\n                totalSizeDeltaInUSD += modifyPositionForMarket(\\n                    _newPositions[i].sizeDelta,\\n                    _newPositions[i].marketKey,\\n                    market\\n                );\\n            }\\n        }\\n\\n        /// @notice impose fee\\n        /// @dev send fee to Kwenta's treasury\\n        if (totalSizeDeltaInUSD > 0) {\\n            require(\\n                marginAsset.transfer(\\n                    marginBaseSettings.treasury(),\\n                    (totalSizeDeltaInUSD * marginBaseSettings.tradeFee()) /\\n                        MAX_BPS\\n                ),\\n                \\\"MarginBase: unable to pay fee\\\"\\n            );\\n        }\\n    }\\n\\n    // @TODO https://github.com/Kwenta/margin-manager/issues/12\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Internal Margin Distribution\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice modify market position's size\\n    /// @dev _sizeDelta will always be non-zero\\n    /// @param _sizeDelta: size and position type (long/short) denoted in market synth (ex: sETH)\\n    /// @param _marketKey: synthetix futures market id/key\\n    /// @param _market: synthetix futures market\\n    /// @return sizeDeltaInUSD _sizeDelta *in sUSD*\\n    function modifyPositionForMarket(\\n        int256 _sizeDelta,\\n        bytes32 _marketKey,\\n        IFuturesMarket _market\\n    ) internal returns (uint256 sizeDeltaInUSD) {\\n        /// @notice _sizeDelta is measured in the underlying base asset of the market\\n        /// @dev fee will be measured in sUSD, thus exchange rate is needed\\n        sizeDeltaInUSD = exchangeRates().effectiveValue(\\n            _market.baseAsset(),\\n            _abs(_sizeDelta),\\n            SUSD\\n        );\\n\\n        // modify position in specific market with KWENTA tracking code\\n        _market.modifyPositionWithTracking(_sizeDelta, TRACKING_CODE);\\n\\n        /// @notice execute necessary state updates\\n        /// @dev must come after modifyPositionWithTracking() due to reliance on fetching\\n        /// futures market data from Synthetix to update interal state\\n        fetchPositionAndUpdate(_marketKey, _market);\\n    }\\n\\n    /// @notice deposit margin into specific market and potentially modify position size\\n    /// @dev _depositSize will always be greater than zero\\n    /// @dev _sizeDelta may be zero (i.e. market position goes unchanged)\\n    /// @param _depositSize: size of deposit in sUSD\\n    /// @param _sizeDelta: size and position type (long/short) denoted in market synth (ex: sETH)\\n    /// @param _marketKey: synthetix futures market id/key\\n    /// @param _market: synthetix futures market\\n    /// @return sizeDeltaInUSD _sizeDelta *in sUSD*\\n    function depositAndModifyPositionForMarket(\\n        int256 _depositSize,\\n        int256 _sizeDelta,\\n        bytes32 _marketKey,\\n        IFuturesMarket _market\\n    ) internal returns (uint256 sizeDeltaInUSD) {\\n        /// @dev ensure trade doesn't spend margin which is not available\\n        uint256 absDepositSize = _abs(_depositSize);\\n        if (absDepositSize > freeMargin()) {\\n            revert InsufficientFreeMargin(freeMargin(), absDepositSize);\\n        }\\n\\n        /// @notice alter the amount of margin in specific market position\\n        /// @dev positive input triggers a deposit; a negative one, a withdrawal\\n        _market.transferMargin(_depositSize);\\n\\n        /// @dev if _sizeDelta is 0, then we do not want to modify position size, only margin\\n        if (_sizeDelta != 0) {\\n            /// @notice _sizeDelta is measured in the underlying base asset of the market\\n            /// @dev fee will be measured in sUSD, thus exchange rate is needed\\n            sizeDeltaInUSD = exchangeRates().effectiveValue(\\n                _market.baseAsset(),\\n                _abs(_sizeDelta),\\n                SUSD\\n            );\\n\\n            // modify position in specific market with KWENTA tracking code\\n            _market.modifyPositionWithTracking(_sizeDelta, TRACKING_CODE);\\n        }\\n\\n        /// @notice execute necessary state updates\\n        /// @dev must come after modifyPositionWithTracking() due to reliance on fetching\\n        /// futures market data from Synthetix to update interal state\\n        fetchPositionAndUpdate(_marketKey, _market);\\n    }\\n\\n    /// @notice potentially modify position size and withdraw margin from market\\n    /// @dev _withdrawalSize can NEVER be positive NOR zero\\n    /// @dev _sizeDelta may be zero (i.e. market position goes unchanged)\\n    /// @param _withdrawalSize: size of sUSD to withdraw from market into account\\n    /// @param _sizeDelta: size and position type (long//short) denoted in market synth (ex: sETH)\\n    /// @param _marketKey: synthetix futures market id/key\\n    /// @param _market: synthetix futures market\\n    /// @return sizeDeltaInUSD _sizeDelta *in sUSD*\\n    function modifyPositionForMarketAndWithdraw(\\n        int256 _withdrawalSize,\\n        int256 _sizeDelta,\\n        bytes32 _marketKey,\\n        IFuturesMarket _market\\n    ) internal returns (uint256 sizeDeltaInUSD) {\\n        /// @dev if _sizeDelta is 0, then we do not want to modify position size, only margin\\n        if (_sizeDelta != 0) {\\n            /// @notice _sizeDelta is measured in the underlying base asset of the market\\n            /// @dev fee will be measured in sUSD, thus exchange rate is needed\\n            sizeDeltaInUSD = exchangeRates().effectiveValue(\\n                _market.baseAsset(),\\n                _abs(_sizeDelta),\\n                SUSD\\n            );\\n\\n            // modify position in specific market with KWENTA tracking code\\n            _market.modifyPositionWithTracking(_sizeDelta, TRACKING_CODE);\\n        }\\n\\n        /// @notice alter the amount of margin in specific market position\\n        /// @dev positive input triggers a deposit; a negative one, a withdrawal\\n        _market.transferMargin(_withdrawalSize);\\n\\n        /// @notice execute necessary state updates\\n        /// @dev must come after modifyPositionWithTracking() due to reliance on fetching\\n        /// futures market data from Synthetix to update interal state\\n        fetchPositionAndUpdate(_marketKey, _market);\\n    }\\n\\n    /// @notice fetch new position from Synthetix and update internal state\\n    /// @dev if position size is zero, function will close position\\n    /// @param _marketKey: synthetix futures market id/key\\n    /// @param _market: synthetix futures market\\n    function fetchPositionAndUpdate(bytes32 _marketKey, IFuturesMarket _market)\\n        internal\\n    {\\n        // fetch new position data from Synthetix\\n        (, , uint128 margin, , int128 size) = _market.positions(address(this));\\n\\n        // if position size is 0, position is effectively closed on\\n        // FuturesMarket but margin is still in contract, thus it must\\n        // be withdrawn back to this account\\n        if (size == 0) {\\n            /// @dev closePositionAndWithdraw() will update internal state\\n            closePositionAndWithdraw(_marketKey, _market);\\n\\n            // no need to proceed in function; early exit.\\n            return;\\n        }\\n\\n        // update internal state for given open market position\\n        updateActiveMarketPosition(_marketKey, margin, size);\\n    }\\n\\n    /// @notice closes futures position and withdraws all margin in that market back to this account\\n    /// @param _marketKey: synthetix futures market id/key\\n    /// @param _market: synthetix futures market\\n    function closePositionAndWithdraw(\\n        bytes32 _marketKey,\\n        IFuturesMarket _market\\n    ) internal {\\n        // internally update state (remove market)\\n        removeActiveMarketPositon(_marketKey);\\n\\n        // withdraw margin back to this account\\n        _market.withdrawAllMargin();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    Internal Account State Management\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice used internally to update contract state for the account's active position tracking\\n    /// @dev parameters are generated and passed to this function via Synthetix Futures' contracts\\n    /// @param _marketKey: key for synthetix futures market\\n    /// @param _margin: amount of margin the specific market position has\\n    /// @param _size: represents size of position (i.e. accounts for leverage)\\n    function updateActiveMarketPosition(\\n        bytes32 _marketKey,\\n        uint128 _margin,\\n        int128 _size\\n    ) internal {\\n        ActiveMarketPosition memory newPosition = ActiveMarketPosition(\\n            _marketKey,\\n            _margin,\\n            _size\\n        );\\n\\n        // check if this is updating a position or creating one\\n        if (activeMarketPositions[_marketKey].marketKey == 0) {\\n            activeMarketKeys.push(_marketKey);\\n        }\\n\\n        // update state of active market positions\\n        activeMarketPositions[_marketKey] = newPosition;\\n    }\\n\\n    /// @notice used internally to remove active market position from contract's internal state\\n    /// @param _marketKey: key for previously active market position\\n    function removeActiveMarketPositon(bytes32 _marketKey) internal {\\n        // ensure active market exists\\n        if (activeMarketPositions[_marketKey].marketKey == 0) {\\n            revert MissingMarketKey(_marketKey);\\n        }\\n\\n        delete activeMarketPositions[_marketKey];\\n        uint256 numberOfActiveMarkets = activeMarketKeys.length;\\n\\n        // @TODO update logic to not use for-loop if possible\\n        for (uint16 i = 0; i < numberOfActiveMarkets; i++) {\\n            // once _marketKey is encountered, swap with\\n            // last element in array and exit for-loop\\n            if (activeMarketKeys[i] == _marketKey) {\\n                /// @dev effectively removes _marketKey from activeMarketKeys\\n                activeMarketKeys[i] = activeMarketKeys[\\n                    numberOfActiveMarkets - 1\\n                ];\\n                break;\\n            }\\n        }\\n        // remove last element now that it has been copied\\n        activeMarketKeys.pop();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Limit Orders\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice limit order logic condition checker\\n    /// @param _orderId: key for an active order\\n    function validOrder(uint256 _orderId) public view returns (bool) {\\n        Order memory order = orders[_orderId];\\n\\n        bytes32 currencyKey = futuresMarket(order.marketKey).baseAsset();\\n        // Get exchange rate for 1 unit\\n        uint256 price = exchangeRates().effectiveValue(currencyKey, 1e18, SUSD);\\n\\n        if (order.sizeDelta > 0) {\\n            // Long\\n            return price <= order.desiredPrice;\\n        } else if (order.sizeDelta < 0) {\\n            // Short\\n            return price >= order.desiredPrice;\\n        }\\n    }\\n\\n    /// @notice register a limit order internally and with gelato\\n    /// @param _marketKey: synthetix futures market id/key\\n    /// @param _marginDelta: amount of margin (in sUSD) to deposit or withdraw\\n    /// @param _sizeDelta: denoted in market currency (i.e. ETH, BTC, etc), size of futures position\\n    /// @param _limitPrice: expected limit order price\\n    /// @return orderId contract interface\\n    function placeOrder(\\n        bytes32 _marketKey,\\n        int256 _marginDelta,\\n        int256 _sizeDelta,\\n        uint256 _limitPrice\\n    )\\n        external\\n        payable\\n        notZero(_abs(_sizeDelta), \\\"_sizeDelta\\\")\\n        onlyOwner\\n        returns (uint256)\\n    {\\n        // if more margin is desired on the position we must commit the margin\\n        if (_marginDelta > 0) {\\n            // ensure margin doesn't exceed max\\n            if (_abs(_marginDelta) > freeMargin()) {\\n                revert InsufficientFreeMargin(freeMargin(), _abs(_marginDelta));\\n            }\\n            committedMargin += _abs(_marginDelta);\\n        }\\n\\n        bytes32 taskId = IOps(ops).createTaskNoPrepayment(\\n            address(this), // execution function address\\n            this.executeOrder.selector, // execution function selector\\n            address(this), // checker (resolver) address\\n            abi.encodeWithSelector(this.checker.selector, orderId), // checker (resolver) calldata,\\n            ETH // payment token\\n        );\\n\\n        orders[orderId] = Order({\\n            marketKey: _marketKey,\\n            marginDelta: _marginDelta,\\n            sizeDelta: _sizeDelta,\\n            desiredPrice: _limitPrice,\\n            gelatoTaskId: taskId\\n        });\\n\\n        return orderId++;\\n    }\\n\\n    /// @notice cancel a gelato queued order\\n    /// @param _orderId: key for an active order\\n    function cancelOrder(uint256 _orderId) external onlyOwner {\\n        Order memory order = orders[_orderId];\\n\\n        // if margin was committed, free it\\n        if (order.marginDelta > 0) {\\n            committedMargin -= _abs(order.marginDelta);\\n        }\\n        IOps(ops).cancelTask(order.gelatoTaskId);\\n\\n        // delete order from orders\\n        delete orders[_orderId];\\n    }\\n\\n    /// @notice execute a gelato queued order\\n    /// @notice only keepers can trigger this function\\n    /// @param _orderId: key for an active order\\n    function executeOrder(uint256 _orderId) external onlyOps {\\n        if (!validOrder(_orderId)) {\\n            revert OrderInvalid();\\n        }\\n        Order memory order = orders[_orderId];\\n\\n        // if margin was committed, free it\\n        if (order.marginDelta > 0) {\\n            committedMargin -= _abs(order.marginDelta);\\n        }\\n\\n        // prep new position\\n        MarginBase.UpdateMarketPositionSpec[]\\n            memory newPositions = new MarginBase.UpdateMarketPositionSpec[](1);\\n        newPositions[0] = UpdateMarketPositionSpec(\\n            order.marketKey,\\n            order.marginDelta,\\n            order.sizeDelta\\n        );\\n\\n        // delete order from orders\\n        delete orders[_orderId];\\n\\n        // execute trade\\n        _distributeMargin(newPositions);\\n\\n        // pay fee\\n        (uint256 fee, address feeToken) = IOps(ops).getFeeDetails();\\n        _transfer(fee, feeToken);\\n    }\\n\\n    /// @notice signal to a keeper that an order is valid/invalid for execution\\n    /// @param _orderId: key for an active order\\n    /// @return canExec boolean that signals to keeper an order can be executed\\n    /// @return execPayload calldata for executing an order\\n    function checker(uint256 _orderId)\\n        external\\n        view\\n        returns (bool canExec, bytes memory execPayload)\\n    {\\n        canExec = validOrder(_orderId);\\n        // calldata for execute func\\n        execPayload = abi.encodeWithSelector(\\n            this.executeOrder.selector,\\n            _orderId\\n        );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Internal Getter Utilities\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice addressResolver fetches IFuturesMarket address for specific market\\n    /// @param _marketKey: key for synthetix futures market\\n    /// @return IFuturesMarket contract interface\\n    function futuresMarket(bytes32 _marketKey)\\n        internal\\n        view\\n        returns (IFuturesMarket)\\n    {\\n        return IFuturesMarket(futuresManager.marketForKey(_marketKey));\\n    }\\n\\n    /// @notice exchangeRates() fetches current ExchangeRates contract\\n    function exchangeRates() internal view returns (IExchangeRates) {\\n        return\\n            IExchangeRates(\\n                addressResolver.requireAndGetAddress(\\n                    \\\"ExchangeRates\\\",\\n                    \\\"MarginBase: Could not get ExchangeRates\\\"\\n                )\\n            );\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Utility Functions\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Absolute value of the input, returned as an unsigned number.\\n    /// @param x: signed number\\n    function _abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x < 0 ? -x : x);\\n    }\\n}\\n\",\"keccak256\":\"0xd44e4439d4ad3b8bec2000a5aa2268e541724a08d970bc21e42369afcdb508c1\",\"license\":\"GPL-3.0-or-later\"},\"contracts/MarginBaseSettings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Kwenta Settings for MarginBase Accounts\\n/// @author JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\\n/// @notice Contract (owned by the deployer) for controlling the settings of MarginBase account(s)\\n/// @dev This contract will require deployment prior to MarginBase account creation\\ncontract MarginBaseSettings is Ownable {\\n    /*///////////////////////////////////////////////////////////////\\n                                Constants\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice decimals calculations\\n    uint256 private constant MAX_BPS = 10000;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Settings\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    // @notice Kwenta's Treasury Address\\n    address public treasury;\\n\\n    /// @notice denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)\\n    /// @dev fee imposed on all trades \\n    /// @dev trades: defined as changes made to IMarginBaseTypes.ActiveMarketPosition.size\\n    uint256 public tradeFee;\\n\\n    /// @notice denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)\\n    /// @dev fee imposed on limit orders\\n    uint256 public limitOrderFee;\\n\\n    /// @notice denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)\\n    /// @dev fee imposed on stop losses\\n    uint256 public stopLossFee;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice emitted after changing treasury address\\n    /// @param treasury: new treasury address\\n    event TreasuryAddressChanged(address treasury);\\n\\n    /// @notice emitted after a successful trade fee change\\n    /// @param fee: fee denoted in BPS\\n    event TradeFeeChanged(uint256 fee);\\n\\n    /// @notice emitted after a successful limit order fee change\\n    /// @param fee: fee denoted in BPS\\n    event LimitOrderFeeChanged(uint256 fee);\\n\\n    /// @notice emitted after a successful stop loss fee change\\n    /// @param fee: fee denoted in BPS\\n    event StopLossFeeChanged(uint256 fee);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Errors\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice zero address cannot be used\\n    error ZeroAddress();\\n\\n    /// @notice invalid fee (fee >= MAX_BPS)\\n    /// @param fee: fee denoted in BPS\\n    error InvalidFee(uint256 fee);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Constructor\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice set initial margin base account fees\\n    /// @param _treasury: Kwenta's Treasury Address\\n    /// @param _tradeFee: fee denoted in BPS\\n    /// @param _limitOrderFee: fee denoted in BPS\\n    /// @param _stopLossFee: fee denoted in BPS\\n    constructor(\\n        address _treasury,\\n        uint256 _tradeFee,\\n        uint256 _limitOrderFee,\\n        uint256 _stopLossFee\\n    ) {\\n        /// @notice ensure valid address for Kwenta Treasury\\n        if (_treasury == address(0)) { revert ZeroAddress(); }\\n        \\n        /// @notice set Kwenta Treasury address \\n        treasury = _treasury;\\n\\n        /// @notice ensure valid fees\\n        if (_tradeFee >= MAX_BPS) { revert InvalidFee(_tradeFee); }\\n        if (_limitOrderFee >= MAX_BPS) { revert InvalidFee(_limitOrderFee); }\\n        if (_stopLossFee >= MAX_BPS) { revert InvalidFee(_stopLossFee); }\\n\\n        /// @notice set initial fees\\n        tradeFee = _tradeFee;\\n        limitOrderFee = _limitOrderFee;\\n        stopLossFee = _stopLossFee;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Setters\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice set new treasury address\\n    /// @param _treasury: new treasury address\\n    function setTreasury(address _treasury) external onlyOwner {\\n        /// @notice ensure valid address for Kwenta Treasury\\n        if (_treasury == address(0)) { revert ZeroAddress(); }\\n\\n        /// @notice set Kwenta Treasury address\\n        treasury = _treasury;\\n\\n        emit TreasuryAddressChanged(_treasury);\\n    }\\n\\n    /// @notice set new trade fee\\n    /// @param _fee: fee denoted in BPS\\n    function setTradeFee(uint256 _fee) external onlyOwner {\\n        /// @notice ensure valid fee\\n        if (_fee >= MAX_BPS) { revert InvalidFee(_fee); }\\n\\n        /// @notice set fee\\n        tradeFee = _fee;\\n\\n        emit TradeFeeChanged(_fee);\\n    }\\n\\n    /// @notice set new limit order fee\\n    /// @param _fee: fee denoted in BPS\\n    function setLimitOrderFee(uint256 _fee) external onlyOwner {\\n        /// @notice ensure valid fee\\n        if (_fee >= MAX_BPS) { revert InvalidFee(_fee); }\\n\\n        /// @notice set fee\\n        limitOrderFee = _fee;\\n\\n        emit LimitOrderFeeChanged(_fee);\\n    }\\n\\n    /// @notice set new stop loss fee\\n    /// @param _fee: fee denoted in BPS\\n    function setStopLossFee(uint256 _fee) external onlyOwner {\\n        /// @notice ensure valid fee\\n        if (_fee >= MAX_BPS) { revert InvalidFee(_fee); }\\n\\n        /// @notice set fee\\n        stopLossFee = _fee;\\n\\n        emit StopLossFeeChanged(_fee);\\n    }\\n}\\n\",\"keccak256\":\"0x127824e58f90e1e64ba0b12e1c2c154ae1706162d0decc239424e43b5a421903\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\\ninterface IAddressResolver {\\n    function getAddress(bytes32 name) external view returns (address);\\n\\n    function getSynth(bytes32 key) external view returns (address);\\n\\n    function requireAndGetAddress(bytes32 name, string calldata reason) external view returns (address);\\n}\",\"keccak256\":\"0x1ce5b918283eb1941981d1e0716280757aac4536da653d049c7e43b176620346\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IExchangeRates.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/iexchangerates\\ninterface IExchangeRates {\\n    // Structs\\n    struct RateAndUpdatedTime {\\n        uint216 rate;\\n        uint40 time;\\n    }\\n\\n    // Views\\n    function aggregators(bytes32 currencyKey) external view returns (address);\\n\\n    function aggregatorWarningFlags() external view returns (address);\\n\\n    function anyRateIsInvalid(bytes32[] calldata currencyKeys) external view returns (bool);\\n\\n    function anyRateIsInvalidAtRound(bytes32[] calldata currencyKeys, uint[] calldata roundIds) external view returns (bool);\\n\\n    function currenciesUsingAggregator(address aggregator) external view returns (bytes32[] memory);\\n\\n    function effectiveValue(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external view returns (uint value);\\n\\n    function effectiveValueAndRates(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (\\n            uint value,\\n            uint sourceRate,\\n            uint destinationRate\\n        );\\n\\n    function effectiveValueAndRatesAtRound(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey,\\n        uint roundIdForSrc,\\n        uint roundIdForDest\\n    )\\n        external\\n        view\\n        returns (\\n            uint value,\\n            uint sourceRate,\\n            uint destinationRate\\n        );\\n\\n    function effectiveAtomicValueAndRates(\\n        bytes32 sourceCurrencyKey,\\n        uint sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    )\\n        external\\n        view\\n        returns (\\n            uint value,\\n            uint systemValue,\\n            uint systemSourceRate,\\n            uint systemDestinationRate\\n        );\\n\\n    function getCurrentRoundId(bytes32 currencyKey) external view returns (uint);\\n\\n    function getLastRoundIdBeforeElapsedSecs(\\n        bytes32 currencyKey,\\n        uint startingRoundId,\\n        uint startingTimestamp,\\n        uint timediff\\n    ) external view returns (uint);\\n\\n    function lastRateUpdateTimes(bytes32 currencyKey) external view returns (uint256);\\n\\n    function rateAndTimestampAtRound(bytes32 currencyKey, uint roundId) external view returns (uint rate, uint time);\\n\\n    function rateAndUpdatedTime(bytes32 currencyKey) external view returns (uint rate, uint time);\\n\\n    function rateAndInvalid(bytes32 currencyKey) external view returns (uint rate, bool isInvalid);\\n\\n    function rateForCurrency(bytes32 currencyKey) external view returns (uint);\\n\\n    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateIsStale(bytes32 currencyKey) external view returns (bool);\\n\\n    function rateStalePeriod() external view returns (uint);\\n\\n    function ratesAndUpdatedTimeForCurrencyLastNRounds(\\n        bytes32 currencyKey,\\n        uint numRounds,\\n        uint roundId\\n    ) external view returns (uint[] memory rates, uint[] memory times);\\n\\n    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\\n        external\\n        view\\n        returns (uint[] memory rates, bool anyRateInvalid);\\n\\n    function ratesForCurrencies(bytes32[] calldata currencyKeys) external view returns (uint[] memory);\\n\\n    function synthTooVolatileForAtomicExchange(bytes32 currencyKey) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x74995b90ae125086f788cc9e6d9aec2493c81ad1f00157d9d88fb432232afa9d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IFuturesMarket.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\nimport \\\"./IFuturesMarketBaseTypes.sol\\\";\\n\\ninterface IFuturesMarket {\\n    /* ========== FUNCTION INTERFACE ========== */\\n\\n    /* ---------- Market Details ---------- */\\n\\n    function marketKey() external view returns (bytes32 key);\\n\\n    function baseAsset() external view returns (bytes32 key);\\n\\n    function marketSize() external view returns (uint128 size);\\n\\n    function marketSkew() external view returns (int128 skew);\\n\\n    function fundingLastRecomputed() external view returns (uint32 timestamp);\\n\\n    function fundingSequence(uint index) external view returns (int128 netFunding);\\n\\n    function positions(address account)\\n        external\\n        view\\n        returns (\\n            uint64 id,\\n            uint64 fundingIndex,\\n            uint128 margin,\\n            uint128 lastPrice,\\n            int128 size\\n        );\\n\\n    function assetPrice() external view returns (uint price, bool invalid);\\n\\n    function marketSizes() external view returns (uint long, uint short);\\n\\n    function marketDebt() external view returns (uint debt, bool isInvalid);\\n\\n    function currentFundingRate() external view returns (int fundingRate);\\n\\n    function unrecordedFunding() external view returns (int funding, bool invalid);\\n\\n    function fundingSequenceLength() external view returns (uint length);\\n\\n    /* ---------- Position Details ---------- */\\n\\n    function notionalValue(address account) external view returns (int value, bool invalid);\\n\\n    function profitLoss(address account) external view returns (int pnl, bool invalid);\\n\\n    function accruedFunding(address account) external view returns (int funding, bool invalid);\\n\\n    function remainingMargin(address account) external view returns (uint marginRemaining, bool invalid);\\n\\n    function accessibleMargin(address account) external view returns (uint marginAccessible, bool invalid);\\n\\n    function liquidationPrice(address account) external view returns (uint price, bool invalid);\\n\\n    function liquidationFee(address account) external view returns (uint);\\n\\n    function canLiquidate(address account) external view returns (bool);\\n\\n    function orderFee(int sizeDelta) external view returns (uint fee, bool invalid);\\n\\n    function postTradeDetails(int sizeDelta, address sender)\\n        external\\n        view\\n        returns (\\n            uint margin,\\n            int size,\\n            uint price,\\n            uint liqPrice,\\n            uint fee,\\n            IFuturesMarketBaseTypes.Status status\\n        );\\n\\n    /* ---------- Market Operations ---------- */\\n\\n    function recomputeFunding() external returns (uint lastIndex);\\n\\n    function transferMargin(int marginDelta) external;\\n\\n    function withdrawAllMargin() external;\\n\\n    function modifyPosition(int sizeDelta) external;\\n\\n    function modifyPositionWithTracking(int sizeDelta, bytes32 trackingCode) external;\\n\\n    function submitNextPriceOrder(int sizeDelta) external;\\n\\n    function submitNextPriceOrderWithTracking(int sizeDelta, bytes32 trackingCode) external;\\n\\n    function cancelNextPriceOrder(address account) external;\\n\\n    function executeNextPriceOrder(address account) external;\\n\\n    function closePosition() external;\\n\\n    function closePositionWithTracking(bytes32 trackingCode) external;\\n\\n    function liquidatePosition(address account) external;\\n}\\n\",\"keccak256\":\"0x0cbba2f1f765197008c04b4d7448720ed9f96c0ec66fb370e80fe3e4c334871b\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IFuturesMarketBaseTypes.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.13;\\n\\ninterface IFuturesMarketBaseTypes {\\n    /* ========== TYPES ========== */\\n\\n    enum Status {\\n        Ok,\\n        InvalidPrice,\\n        PriceOutOfBounds,\\n        CanLiquidate,\\n        CannotLiquidate,\\n        MaxMarketSizeExceeded,\\n        MaxLeverageExceeded,\\n        InsufficientMargin,\\n        NotPermitted,\\n        NilOrder,\\n        NoPositionOpen,\\n        PriceTooVolatile\\n    }\\n\\n    // If margin/size are positive, the position is long; if negative then it is short.\\n    struct Position {\\n        uint64 id;\\n        uint64 lastFundingIndex;\\n        uint128 margin;\\n        uint128 lastPrice;\\n        int128 size;\\n    }\\n\\n    // next-price order storage\\n    struct NextPriceOrder {\\n        int128 sizeDelta; // difference in position to pass to modifyPosition\\n        uint128 targetRoundId; // price oracle roundId using which price this order needs to exucted\\n        uint128 commitDeposit; // the commitDeposit paid upon submitting that needs to be refunded if order succeeds\\n        uint128 keeperDeposit; // the keeperDeposit paid upon submitting that needs to be paid / refunded on tx confirmation\\n        bytes32 trackingCode; // tracking code to emit on execution for volume source fee sharing\\n    }\\n}\\n\",\"keccak256\":\"0x65e49e0cf818bbbb611318b12f2246b9af7888e3de203ad9d8f0f9c5af0b9817\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IFuturesMarketManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\ninterface IFuturesMarketManager {\\n    function markets(uint index, uint pageSize) external view returns (address[] memory);\\n\\n    function numMarkets() external view returns (uint);\\n\\n    function allMarkets() external view returns (address[] memory);\\n\\n    function marketForKey(bytes32 marketKey) external view returns (address);\\n\\n    function marketsForKeys(bytes32[] calldata marketKeys) external view returns (address[] memory);\\n\\n    function totalDebt() external view returns (uint debt, bool isInvalid);\\n}\",\"keccak256\":\"0x30b60e670e95e3f9096232f51bd21abd8c12f0dc8cfffe3cff79aad7f714fe31\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IMarginBaseTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\n/// @title Kwenta MarginBase Types\\n/// @author JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\\n/// @notice Types used in Margin Base Accounts\\ninterface IMarginBaseTypes {\\n    /*///////////////////////////////////////////////////////////////\\n                                Types\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    // marketKey: synthetix futures market id/key\\n    // margin: amount of margin (in sUSD) in specific futures market\\n    // size: denoted in market currency (i.e. ETH, BTC, etc), size of futures position\\n    struct ActiveMarketPosition {\\n        bytes32 marketKey;\\n        uint128 margin;\\n        int128 size;\\n    }\\n\\n    // marketKey: synthetix futures market id/key\\n    // marginDelta: amount of margin (in sUSD) to deposit or withdraw\\n    // sizeDelta: denoted in market currency (i.e. ETH, BTC, etc), size of futures position\\n    struct UpdateMarketPositionSpec {\\n        bytes32 marketKey;\\n        int256 marginDelta; // positive indicates deposit, negative withdraw\\n        int256 sizeDelta;\\n    }\\n\\n    // marketKey: synthetix futures market id/key\\n    // marginDelta: amount of margin (in sUSD) to deposit or withdraw\\n    // sizeDelta: denoted in market currency (i.e. ETH, BTC, etc), size of futures position\\n    // desiredPrice: limit or stop price desired\\n    // gelatoTaskId: unqiue taskId from gelato necessary for cancelling orders\\n    struct Order {\\n        bytes32 marketKey;\\n        int256 marginDelta; // positive indicates deposit, negative withdraw\\n        int256 sizeDelta;\\n        uint256 desiredPrice;\\n        bytes32 gelatoTaskId;\\n    }\\n}\\n\",\"keccak256\":\"0x14d5b85f6702d1c255fe4c9b81d2d141db512f85e468a23b094f9a35c33d2e78\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/MinimalProxyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\ncontract MinimalProxyFactory {\\n    function _cloneAsMinimalProxy(address _base, string memory _revertMsg)\\n        internal\\n        returns (address clone)\\n    {\\n        bytes memory createData = _generateMinimalProxyCreateData(_base);\\n\\n        assembly {\\n            clone := create(\\n                0, // no value\\n                add(createData, 0x20), // data\\n                55 // data is always 55 bytes (10 constructor + 45 code)\\n            )\\n        }\\n\\n        // If CREATE fails for some reason, address(0) is returned\\n        require(clone != address(0), _revertMsg);\\n    }\\n\\n    function _generateMinimalProxyCreateData(address _base)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                //---- constructor -----\\n                bytes10(0x3d602d80600a3d3981f3),\\n                //---- proxy code -----\\n                bytes10(0x363d3d373d3d3d363d73),\\n                _base,\\n                bytes15(0x5af43d82803e903d91602b57fd5bf3)\\n            );\\n    }\\n}\",\"keccak256\":\"0xcc04c9232bc04c01a000fccbbaed391acccec5817b3eff994d077f4319fdeaff\",\"license\":\"MIT\"},\"contracts/utils/MinimalProxyable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MinimalProxyable is Ownable {\\n\\n    bool masterCopy;\\n    bool initialized;\\n\\n    constructor() {\\n        masterCopy = true;\\n    }\\n\\n    function initialize() public initOnce {}\\n\\n    modifier initOnce {\\n        require(!masterCopy, \\\"Cannot initialize implementation\\\");\\n        require(!initialized, \\\"Already initialized\\\");\\n        initialized = true;\\n        _;\\n    }\\n\\n}\",\"keccak256\":\"0xfa99c61553ada20347d354b15cfa016bc7d48edb120c9bd3722f687a8adea244\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/OpsReady.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\nimport {\\n    SafeERC20,\\n    IERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IOps {\\n    function gelato() external view returns (address payable);\\n    \\n    function createTaskNoPrepayment(\\n        address _execAddress,\\n        bytes4 _execSelector,\\n        address _resolverAddress,\\n        bytes calldata _resolverData,\\n        address _feeToken\\n    ) external returns (bytes32 task);\\n\\n    function cancelTask(bytes32 _taskId) external;\\n\\n    function getFeeDetails() external view returns (uint256, address);\\n}\\n\\nabstract contract OpsReady {\\n    address public ops;\\n    address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    modifier onlyOps() {\\n        require(msg.sender == ops, \\\"OpsReady: onlyOps\\\");\\n        _;\\n    }\\n\\n    function gelato() public view returns (address payable) {\\n        return IOps(ops).gelato();\\n    }\\n\\n    function _transfer(uint256 _amount, address _paymentToken) internal {\\n        if (_paymentToken == ETH) {\\n            (bool success, ) = gelato().call{value: _amount}(\\\"\\\");\\n            require(success, \\\"_transfer: ETH transfer failed\\\");\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(_paymentToken), gelato(), _amount);\\n        }\\n    }\\n}\",\"keccak256\":\"0xafdbac1df9d4195d88a37e9dea199d1d0eba6ffb777c8f2b309ffda01d9b689b\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162005fb638038062005fb683398181016040528101906200003891906200049d565b84600090805190602001906200005092919062000198565b506040516200005f9062000229565b604051809103906000f0801580156200007c573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508273ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250505050505050620005a8565b828054620001a69062000573565b90600052602060002090601f016020900481019282620001ca576000855562000216565b82601f10620001e557805160ff191683800117855562000216565b8280016001018555821562000216579182015b8281111562000215578251825591602001919060010190620001f8565b5b50905062000225919062000237565b5090565b6150068062000fb083390190565b5b808211156200025257600081600090555060010162000238565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620002bf8262000274565b810181811067ffffffffffffffff82111715620002e157620002e062000285565b5b80604052505050565b6000620002f662000256565b9050620003048282620002b4565b919050565b600067ffffffffffffffff82111562000327576200032662000285565b5b620003328262000274565b9050602081019050919050565b60005b838110156200035f57808201518184015260208101905062000342565b838111156200036f576000848401525b50505050565b60006200038c620003868462000309565b620002ea565b905082815260208101848484011115620003ab57620003aa6200026f565b5b620003b88482856200033f565b509392505050565b600082601f830112620003d857620003d76200026a565b5b8151620003ea84826020860162000375565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200042082620003f3565b9050919050565b620004328162000413565b81146200043e57600080fd5b50565b600081519050620004528162000427565b92915050565b60006200046582620003f3565b9050919050565b620004778162000458565b81146200048357600080fd5b50565b60008151905062000497816200046c565b92915050565b600080600080600060a08688031215620004bc57620004bb62000260565b5b600086015167ffffffffffffffff811115620004dd57620004dc62000265565b5b620004eb88828901620003c0565b9550506020620004fe8882890162000441565b9450506040620005118882890162000441565b9350506060620005248882890162000441565b9250506080620005378882890162000486565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200058c57607f821691505b602082108103620005a257620005a162000544565b5b50919050565b60805160a05160c05160e0516109b2620005fe6000396000818161035b015261048d015260008181610156015261031701526000818161025201526102f601526000818161022e015261027c01526109b26000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80635c60da1b1161005b5780635c60da1b146100dc57806382689cae146100fa578063bf335e6214610118578063e70abe92146101365761007d565b806305a2ee2a1461008257806334b366f9146100a057806354fd4d50146100be575b600080fd5b61008a610154565b60405161009791906105df565b60405180910390f35b6100a8610178565b6040516100b591906105df565b60405180910390f35b6100c661019e565b6040516100d39190610693565b60405180910390f35b6100e461022c565b6040516100f19190610714565b60405180910390f35b610102610250565b60405161010f9190610750565b60405180910390f35b610120610274565b60405161012d91906105df565b60405180910390f35b61013e61048b565b60405161014b919061078c565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080546101ab906107d6565b80601f01602080910402602001604051908101604052809291908181526020018280546101d7906107d6565b80156102245780601f106101f957610100808354040283529160200191610224565b820191906000526020600020905b81548152906001019060200180831161020757829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806102d67f00000000000000000000000000000000000000000000000000000000000000006040518060400160405280601081526020017f4372656174696f6e206661696c757265000000000000000000000000000000008152506104af565b90508073ffffffffffffffffffffffffffffffffffffffff1663f8c8765e7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000006040518563ffffffff1660e01b81526004016103999493929190610807565b600060405180830381600087803b1580156103b357600080fd5b505af11580156103c7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040161040491906105df565b600060405180830381600087803b15801561041e57600080fd5b505af1158015610432573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f14cb25cca821184a88389fa7823ef6a4cd65897a89cbdcf5169542b8d790478b8260405161047c91906105df565b60405180910390a28091505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806104bb84610543565b90506037602082016000f09150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415839061053b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105329190610693565b60405180910390fd5b505092915050565b6060693d602d80600a3d3981f360b01b69363d3d373d3d3d363d7360b01b836e5af43d82803e903d91602b57fd5bf360881b604051602001610588949392919061092e565b6040516020818303038152906040529050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105c98261059e565b9050919050565b6105d9816105be565b82525050565b60006020820190506105f460008301846105d0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610634578082015181840152602081019050610619565b83811115610643576000848401525b50505050565b6000601f19601f8301169050919050565b6000610665826105fa565b61066f8185610605565b935061067f818560208601610616565b61068881610649565b840191505092915050565b600060208201905081810360008301526106ad818461065a565b905092915050565b6000819050919050565b60006106da6106d56106d08461059e565b6106b5565b61059e565b9050919050565b60006106ec826106bf565b9050919050565b60006106fe826106e1565b9050919050565b61070e816106f3565b82525050565b60006020820190506107296000830184610705565b92915050565b600061073a826106e1565b9050919050565b61074a8161072f565b82525050565b60006020820190506107656000830184610741565b92915050565b60006107768261059e565b9050919050565b6107868161076b565b82525050565b60006020820190506107a1600083018461077d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107ee57607f821691505b602082108103610801576108006107a7565b5b50919050565b600060808201905061081c60008301876105d0565b61082960208301866105d0565b61083660408301856105d0565b610843606083018461077d565b95945050505050565b60007fffffffffffffffffffff0000000000000000000000000000000000000000000082169050919050565b6000819050919050565b61089361088e8261084c565b610878565b82525050565b60008160601b9050919050565b60006108b182610899565b9050919050565b60006108c3826108a6565b9050919050565b6108db6108d6826105be565b6108b8565b82525050565b60007fffffffffffffffffffffffffffffff000000000000000000000000000000000082169050919050565b6000819050919050565b610928610923826108e1565b61090d565b82525050565b600061093a8287610882565b600a8201915061094a8286610882565b600a8201915061095a82856108ca565b60148201915061096a8284610917565b600f820191508190509594505050505056fea2646970667358221220cef86e61639c9d14de8b82b2cfa88a3fd03e9943611cc9b4d1a3cc255a1131e464736f6c634300080d003360806040523480156200001157600080fd5b5062000032620000266200005360201b60201c565b6200005b60201b60201c565b6001600060146101000a81548160ff0219169083151502179055506200011f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b614ed7806200012f6000396000f3fe60806040526004361061019c5760003560e01c80638da5cb5b116100ec578063c311d0491161008a578063e70abe9211610064578063e70abe921461059e578063ea1d5ae6146105c9578063f2fde38b14610606578063f8c8765e1461062f5761019c565b8063c311d0491461051a578063ce459e6514610543578063e07c09cd1461056e5761019c565b8063a4890337116100c6578063a48903371461045a578063a85c38ef14610485578063ab3ceafa146104c6578063b6b55f25146104f15761019c565b80638da5cb5b146103c857806394e05b2c146103f357806394f61134146104315761019c565b8063514fcac711610159578063715018a611610133578063715018a6146103445780638129fc1c1461035b57806382689cae146103725780638322fff21461039d5761019c565b8063514fcac7146102c5578063573ea575146102ee57806361383805146103195761019c565b80630af5c2d0146101a1578063163de5e5146101e05780632e1a7d4d1461020b578063301249d914610234578063325314e51461025d57806334b366f91461029a575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c39190613654565b610658565b6040516101d7939291906136d7565b60405180910390f35b3480156101ec57600080fd5b506101f56106ab565b6040516102029190613727565b60405180910390f35b34801561021757600080fd5b50610232600480360381019061022d919061376e565b6106b1565b005b34801561024057600080fd5b5061025b60048036038101906102569190613993565b610922565b005b34801561026957600080fd5b50610284600480360381019061027f919061376e565b6109aa565b60405161029191906139dc565b60405180910390f35b3480156102a657600080fd5b506102af6109ce565b6040516102bc9190613a76565b60405180910390f35b3480156102d157600080fd5b506102ec60048036038101906102e7919061376e565b6109f4565b005b3480156102fa57600080fd5b50610303610bca565b6040516103109190613ab2565b60405180910390f35b34801561032557600080fd5b5061032e610c62565b60405161033b9190613727565b60405180910390f35b34801561035057600080fd5b50610359610d12565b005b34801561036757600080fd5b50610370610d9a565b005b34801561037e57600080fd5b50610387610e57565b6040516103949190613aee565b60405180910390f35b3480156103a957600080fd5b506103b2610e7d565b6040516103bf9190613b2a565b60405180910390f35b3480156103d457600080fd5b506103dd610e95565b6040516103ea9190613b2a565b60405180910390f35b3480156103ff57600080fd5b5061041a6004803603810190610415919061376e565b610ebe565b604051610428929190613be8565b60405180910390f35b34801561043d57600080fd5b506104586004803603810190610453919061376e565b610f4a565b005b34801561046657600080fd5b5061046f61122e565b60405161047c9190613727565b60405180910390f35b34801561049157600080fd5b506104ac60048036038101906104a7919061376e565b611234565b6040516104bd959493929190613c27565b60405180910390f35b3480156104d257600080fd5b506104db61126a565b6040516104e89190613727565b60405180910390f35b3480156104fd57600080fd5b506105186004803603810190610513919061376e565b611277565b005b34801561052657600080fd5b50610541600480360381019061053c919061376e565b611495565b005b34801561054f57600080fd5b506105586115bf565b6040516105659190613d98565b60405180910390f35b61058860048036038101906105839190613dba565b611720565b6040516105959190613727565b60405180910390f35b3480156105aa57600080fd5b506105b3611a6e565b6040516105c09190613b2a565b60405180910390f35b3480156105d557600080fd5b506105f060048036038101906105eb919061376e565b611a94565b6040516105fd9190613e21565b60405180910390f35b34801561061257600080fd5b5061062d60048036038101906106289190613e68565b611c60565b005b34801561063b57600080fd5b5061065660048036038101906106519190613ec1565b611d57565b005b60086020528060005260406000206000915090508060000154908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16908060010160109054906101000a9004600f0b905083565b600a5481565b807f5f616d6f756e74000000000000000000000000000000000000000000000000006000820361071857806040517f227a7b4d00000000000000000000000000000000000000000000000000000000815260040161070f91906139dc565b60405180910390fd5b610720612062565b73ffffffffffffffffffffffffffffffffffffffff1661073e610e95565b73ffffffffffffffffffffffffffffffffffffffff1614610794576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078b90613f85565b60405180910390fd5b61079c610c62565b8311156107e9576107ab610c62565b836040517f3cb0273a0000000000000000000000000000000000000000000000000000000081526004016107e0929190613fa5565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb61082f610e95565b856040518363ffffffff1660e01b815260040161084d929190613fce565b6020604051808303816000875af115801561086c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108909190614023565b6108cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c69061409c565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364846040516109159190613727565b60405180910390a2505050565b61092a612062565b73ffffffffffffffffffffffffffffffffffffffff16610948610e95565b73ffffffffffffffffffffffffffffffffffffffff161461099e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099590613f85565b60405180910390fd5b6109a78161206a565b50565b600781815481106109ba57600080fd5b906000526020600020016000915090505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109fc612062565b73ffffffffffffffffffffffffffffffffffffffff16610a1a610e95565b73ffffffffffffffffffffffffffffffffffffffff1614610a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6790613f85565b60405180910390fd5b6000600960008381526020019081526020016000206040518060a0016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815250509050600081602001511315610af757610ade8160200151612508565b60066000828254610aef91906140eb565b925050819055505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ee8ca3b582608001516040518263ffffffff1660e01b8152600401610b5691906139dc565b600060405180830381600087803b158015610b7057600080fd5b505af1158015610b84573d6000803e3d6000fd5b5050505060096000838152602001908152602001600020600080820160009055600182016000905560028201600090556003820160009055600482016000905550505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663573ea5756040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d9190614134565b905090565b6000600654600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610cc29190613b2a565b602060405180830381865afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d039190614176565b610d0d91906140eb565b905090565b610d1a612062565b73ffffffffffffffffffffffffffffffffffffffff16610d38610e95565b73ffffffffffffffffffffffffffffffffffffffff1614610d8e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8590613f85565b60405180910390fd5b610d986000612529565b565b600060149054906101000a900460ff1615610dea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de1906141ef565b60405180910390fd5b600060159054906101000a900460ff1615610e3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e319061425b565b60405180910390fd5b6001600060156101000a81548160ff021916908315150217905550565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060610ecb83611a94565b91506394f6113460e01b83604051602401610ee69190613727565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050915091565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610fda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd1906142c7565b60405180910390fd5b610fe381611a94565b611019576040517f2e0c0f7100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600960008381526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000816020015113156110a0576110878160200151612508565b6006600082825461109891906140eb565b925050819055505b6000600167ffffffffffffffff8111156110bd576110bc6137b1565b5b6040519080825280602002602001820160405280156110f657816020015b6110e36135ad565b8152602001906001900390816110db5790505b50905060405180606001604052808360000151815260200183602001518152602001836040015181525081600081518110611134576111336142e7565b5b602002602001018190525060096000848152602001908152602001600020600080820160009055600182016000905560028201600090556003820160009055600482016000905550506111868161206a565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b810c6366040518163ffffffff1660e01b81526004016040805180830381865afa1580156111f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611219919061432b565b9150915061122782826125ed565b5050505050565b60065481565b60096020528060005260406000206000915090508060000154908060010154908060020154908060030154908060040154905085565b6000600780549050905090565b807f5f616d6f756e7400000000000000000000000000000000000000000000000000600082036112de57806040517f227a7b4d0000000000000000000000000000000000000000000000000000000081526004016112d591906139dc565b60405180910390fd5b6112e6612062565b73ffffffffffffffffffffffffffffffffffffffff16611304610e95565b73ffffffffffffffffffffffffffffffffffffffff161461135a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135190613f85565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd6113a0610e95565b30866040518463ffffffff1660e01b81526004016113c09392919061436b565b6020604051808303816000875af11580156113df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114039190614023565b611442576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611439906143ee565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c846040516114889190613727565b60405180910390a2505050565b61149d612062565b73ffffffffffffffffffffffffffffffffffffffff166114bb610e95565b73ffffffffffffffffffffffffffffffffffffffff1614611511576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150890613f85565b60405180910390fd5b600061151b610e95565b73ffffffffffffffffffffffffffffffffffffffff168260405161153e9061443f565b60006040518083038185875af1925050503d806000811461157b576040519150601f19603f3d011682016040523d82523d6000602084013e611580565b606091505b50509050806115bb576040517f0ca79afd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b6060600060078054905067ffffffffffffffff8111156115e2576115e16137b1565b5b60405190808252806020026020018201604052801561161b57816020015b6116086135d1565b8152602001906001900390816116005790505b50905060005b6007805490508161ffff161015611718576008600060078361ffff168154811061164e5761164d6142e7565b5b90600052602060002001548152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016001820160109054906101000a9004600f0b600f0b600f0b81525050828261ffff16815181106116fa576116f96142e7565b5b6020026020010181905250808061171090614462565b915050611621565b508091505090565b600061172b83612508565b7f5f73697a6544656c7461000000000000000000000000000000000000000000006000820361179157806040517f227a7b4d00000000000000000000000000000000000000000000000000000000815260040161178891906139dc565b60405180910390fd5b611799612062565b73ffffffffffffffffffffffffffffffffffffffff166117b7610e95565b73ffffffffffffffffffffffffffffffffffffffff161461180d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180490613f85565b60405180910390fd5b600086131561189d5761181e610c62565b61182787612508565b111561187b57611835610c62565b61183e87612508565b6040517f3cb0273a000000000000000000000000000000000000000000000000000000008152600401611872929190613fa5565b60405180910390fd5b61188486612508565b60066000828254611895919061448c565b925050819055505b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9f45adb306394f6113460e01b306394e05b2c60e01b600a546040516024016119029190613727565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6040518663ffffffff1660e01b815260040161199495949392919061451d565b6020604051808303816000875af11580156119b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d7919061458c565b90506040518060a001604052808981526020018881526020018781526020018681526020018281525060096000600a5481526020019081526020016000206000820151816000015560208201518160010155604082015181600201556060820151816003015560808201518160040155905050600a6000815480929190611a5d906145b9565b919050559350505050949350505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600960008481526020019081526020016000206040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152505090506000611af88260000151612704565b73ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b66919061458c565b90506000611b726127a9565b73ffffffffffffffffffffffffffffffffffffffff1663654a60ac83670de0b6b3a76400007f73555344000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b8152600401611bd69392919061463c565b602060405180830381865afa158015611bf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c179190614176565b9050600083604001511315611c385782606001518111159350505050611c5b565b600083604001511215611c575782606001518110159350505050611c5b565b5050505b919050565b611c68612062565b73ffffffffffffffffffffffffffffffffffffffff16611c86610e95565b73ffffffffffffffffffffffffffffffffffffffff1614611cdc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd390613f85565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611d4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d42906146e5565b60405180910390fd5b611d5481612529565b50565b600060149054906101000a900460ff1615611da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d9e906141ef565b60405180910390fd5b600060159054906101000a900460ff1615611df7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dee9061425b565b60405180910390fd5b6001600060156101000a81548160ff02191690831515021790555083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dacb2d017f467574757265734d61726b65744d616e616765720000000000000000000000006040518263ffffffff1660e01b8152600401611f0f9190614777565b602060405180830381865afa158015611f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5091906147a5565b600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061201b33612529565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b600033905090565b60ff8016815111156120b45780516040517f0a9fd21a0000000000000000000000000000000000000000000000000000000081526004016120ab9190613727565b60405180910390fd5b6000805b82518160ff1610156122e25760006120f0848360ff16815181106120df576120de6142e7565b5b602002602001015160000151612704565b90506000848360ff168151811061210a576121096142e7565b5b602002602001015160200151121561219d5761218b848360ff1681518110612135576121346142e7565b5b602002602001015160200151858460ff1681518110612157576121566142e7565b5b602002602001015160400151868560ff1681518110612179576121786142e7565b5b6020026020010151600001518461284a565b83612196919061448c565b92506122ce565b6000848360ff16815181106121b5576121b46142e7565b5b602002602001015160200151131561224857612236848360ff16815181106121e0576121df6142e7565b5b602002602001015160200151858460ff1681518110612202576122016142e7565b5b602002602001015160400151868560ff1681518110612224576122236142e7565b5b60200260200101516000015184612a7b565b83612241919061448c565b92506122cd565b6000848360ff16815181106122605761225f6142e7565b5b602002602001015160400151146122cc576122be848360ff168151811061228a576122896142e7565b5b602002602001015160400151858460ff16815181106122ac576122ab6142e7565b5b60200260200101516000015183612d0f565b836122c9919061448c565b92505b5b5b5080806122da906147df565b9150506120b8565b50600081111561250457600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166361d027b36040518163ffffffff1660e01b8152600401602060405180830381865afa158015612397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bb91906147a5565b612710600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166324bcdfbd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561242b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244f9190614176565b8561245a9190614808565b6124649190614891565b6040518363ffffffff1660e01b8152600401612481929190613fce565b6020604051808303816000875af11580156124a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124c49190614023565b612503576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124fa9061490e565b60405180910390fd5b5b5050565b60008082126125175781612522565b816125219061492e565b5b9050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036126ed57600061263e610bca565b73ffffffffffffffffffffffffffffffffffffffff16836040516126619061443f565b60006040518083038185875af1925050503d806000811461269e576040519150601f19603f3d011682016040523d82523d6000602084013e6126a3565b606091505b50509050806126e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126de906149c2565b60405180910390fd5b50612700565b6126ff816126f9610bca565b84612ecc565b5b5050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e63bfadb836040518263ffffffff1660e01b815260040161276191906139dc565b602060405180830381865afa15801561277e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127a291906147a5565b9050919050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dacb2d016040518163ffffffff1660e01b815260040161280490614a7a565b602060405180830381865afa158015612821573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284591906147a5565b905090565b60008084146129fe5761285b6127a9565b73ffffffffffffffffffffffffffffffffffffffff1663654a60ac8373ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128e5919061458c565b6128ee87612508565b7f73555344000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b815260040161292d93929190614aa6565b602060405180830381865afa15801561294a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061296e9190614176565b90508173ffffffffffffffffffffffffffffffffffffffff1663a28a2bc0857f4b57454e544100000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b81526004016129cb929190614add565b600060405180830381600087803b1580156129e557600080fd5b505af11580156129f9573d6000803e3d6000fd5b505050505b8173ffffffffffffffffffffffffffffffffffffffff166388a3c848866040518263ffffffff1660e01b8152600401612a379190614b06565b600060405180830381600087803b158015612a5157600080fd5b505af1158015612a65573d6000803e3d6000fd5b50505050612a738383612f52565b949350505050565b600080612a8786612508565b9050612a91610c62565b811115612ade57612aa0610c62565b816040517f3cb0273a000000000000000000000000000000000000000000000000000000008152600401612ad5929190613fa5565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff166388a3c848876040518263ffffffff1660e01b8152600401612b179190614b06565b600060405180830381600087803b158015612b3157600080fd5b505af1158015612b45573d6000803e3d6000fd5b5050505060008514612cfc57612b596127a9565b73ffffffffffffffffffffffffffffffffffffffff1663654a60ac8473ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612bbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612be3919061458c565b612bec88612508565b7f73555344000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b8152600401612c2b93929190614aa6565b602060405180830381865afa158015612c48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6c9190614176565b91508273ffffffffffffffffffffffffffffffffffffffff1663a28a2bc0867f4b57454e544100000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401612cc9929190614add565b600060405180830381600087803b158015612ce357600080fd5b505af1158015612cf7573d6000803e3d6000fd5b505050505b612d068484612f52565b50949350505050565b6000612d196127a9565b73ffffffffffffffffffffffffffffffffffffffff1663654a60ac8373ffffffffffffffffffffffffffffffffffffffff1663cdf456e16040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612da3919061458c565b612dac87612508565b7f73555344000000000000000000000000000000000000000000000000000000006040518463ffffffff1660e01b8152600401612deb93929190614aa6565b602060405180830381865afa158015612e08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e2c9190614176565b90508173ffffffffffffffffffffffffffffffffffffffff1663a28a2bc0857f4b57454e544100000000000000000000000000000000000000000000000000006040518363ffffffff1660e01b8152600401612e89929190614add565b600060405180830381600087803b158015612ea357600080fd5b505af1158015612eb7573d6000803e3d6000fd5b50505050612ec58383612f52565b9392505050565b612f4d8363a9059cbb60e01b8484604051602401612eeb929190613fce565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613004565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff166355f57510306040518263ffffffff1660e01b8152600401612f8e9190613b2a565b60a060405180830381865afa158015612fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fcf9190614bb9565b94505093505050600081600f0b03612ff257612feb84846130cb565b5050613000565b612ffd848383613138565b50505b5050565b6000613066826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661325e9092919063ffffffff16565b90506000815111156130c657808060200190518101906130869190614023565b6130c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130bc90614ca6565b60405180910390fd5b5b505050565b6130d482613276565b8073ffffffffffffffffffffffffffffffffffffffff16635a1cbd2b6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561311c57600080fd5b505af1158015613130573d6000803e3d6000fd5b505050505050565b60006040518060600160405280858152602001846fffffffffffffffffffffffffffffffff16815260200183600f0b81525090506000801b6008600086815260200190815260200160002060000154036131b65760078490806001815401808255809150506001900390600052602060002001600090919091909150555b80600860008681526020019081526020016000206000820151816000015560208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff0219169083600f0b6fffffffffffffffffffffffffffffffff16021790555090505050505050565b606061326d848460008561340f565b90509392505050565b6000801b6008600083815260200190815260200160002060000154036132d357806040517f143359ab0000000000000000000000000000000000000000000000000000000081526004016132ca91906139dc565b60405180910390fd5b600860008281526020019081526020016000206000808201600090556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906fffffffffffffffffffffffffffffffff021916905550506000600780549050905060005b818161ffff1610156133e2578260078261ffff1681548110613369576133686142e7565b5b9060005260206000200154036133cf57600760018361338891906140eb565b81548110613399576133986142e7565b5b906000526020600020015460078261ffff16815481106133bc576133bb6142e7565b5b90600052602060002001819055506133e2565b80806133da90614462565b915050613344565b5060078054806133f5576133f4614cc6565b5b600190038181906000526020600020016000905590555050565b606082471015613454576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161344b90614d67565b60405180910390fd5b61345d85613523565b61349c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349390614dd3565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516134c59190614e24565b60006040518083038185875af1925050503d8060008114613502576040519150601f19603f3d011682016040523d82523d6000602084013e613507565b606091505b5091509150613517828286613546565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315613556578290506135a6565b6000835111156135695782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161359d9190614e7f565b60405180910390fd5b9392505050565b60405180606001604052806000801916815260200160008152602001600081525090565b60405180606001604052806000801916815260200160006fffffffffffffffffffffffffffffffff1681526020016000600f0b81525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6136318161361e565b811461363c57600080fd5b50565b60008135905061364e81613628565b92915050565b60006020828403121561366a57613669613614565b5b60006136788482850161363f565b91505092915050565b61368a8161361e565b82525050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6136b581613690565b82525050565b600081600f0b9050919050565b6136d1816136bb565b82525050565b60006060820190506136ec6000830186613681565b6136f960208301856136ac565b61370660408301846136c8565b949350505050565b6000819050919050565b6137218161370e565b82525050565b600060208201905061373c6000830184613718565b92915050565b61374b8161370e565b811461375657600080fd5b50565b60008135905061376881613742565b92915050565b60006020828403121561378457613783613614565b5b600061379284828501613759565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6137e9826137a0565b810181811067ffffffffffffffff82111715613808576138076137b1565b5b80604052505050565b600061381b61360a565b905061382782826137e0565b919050565b600067ffffffffffffffff821115613847576138466137b1565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000819050919050565b61387581613862565b811461388057600080fd5b50565b6000813590506138928161386c565b92915050565b6000606082840312156138ae576138ad61385d565b5b6138b86060613811565b905060006138c88482850161363f565b60008301525060206138dc84828501613883565b60208301525060406138f084828501613883565b60408301525092915050565b600061390f61390a8461382c565b613811565b9050808382526020820190506060840283018581111561393257613931613858565b5b835b8181101561395b57806139478882613898565b845260208401935050606081019050613934565b5050509392505050565b600082601f83011261397a5761397961379b565b5b813561398a8482602086016138fc565b91505092915050565b6000602082840312156139a9576139a8613614565b5b600082013567ffffffffffffffff8111156139c7576139c6613619565b5b6139d384828501613965565b91505092915050565b60006020820190506139f16000830184613681565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613a3c613a37613a32846139f7565b613a17565b6139f7565b9050919050565b6000613a4e82613a21565b9050919050565b6000613a6082613a43565b9050919050565b613a7081613a55565b82525050565b6000602082019050613a8b6000830184613a67565b92915050565b6000613a9c826139f7565b9050919050565b613aac81613a91565b82525050565b6000602082019050613ac76000830184613aa3565b92915050565b6000613ad882613a43565b9050919050565b613ae881613acd565b82525050565b6000602082019050613b036000830184613adf565b92915050565b6000613b14826139f7565b9050919050565b613b2481613b09565b82525050565b6000602082019050613b3f6000830184613b1b565b92915050565b60008115159050919050565b613b5a81613b45565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613b9a578082015181840152602081019050613b7f565b83811115613ba9576000848401525b50505050565b6000613bba82613b60565b613bc48185613b6b565b9350613bd4818560208601613b7c565b613bdd816137a0565b840191505092915050565b6000604082019050613bfd6000830185613b51565b8181036020830152613c0f8184613baf565b90509392505050565b613c2181613862565b82525050565b600060a082019050613c3c6000830188613681565b613c496020830187613c18565b613c566040830186613c18565b613c636060830185613718565b613c706080830184613681565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613caf8161361e565b82525050565b613cbe81613690565b82525050565b613ccd816136bb565b82525050565b606082016000820151613ce96000850182613ca6565b506020820151613cfc6020850182613cb5565b506040820151613d0f6040850182613cc4565b50505050565b6000613d218383613cd3565b60608301905092915050565b6000602082019050919050565b6000613d4582613c7a565b613d4f8185613c85565b9350613d5a83613c96565b8060005b83811015613d8b578151613d728882613d15565b9750613d7d83613d2d565b925050600181019050613d5e565b5085935050505092915050565b60006020820190508181036000830152613db28184613d3a565b905092915050565b60008060008060808587031215613dd457613dd3613614565b5b6000613de28782880161363f565b9450506020613df387828801613883565b9350506040613e0487828801613883565b9250506060613e1587828801613759565b91505092959194509250565b6000602082019050613e366000830184613b51565b92915050565b613e4581613b09565b8114613e5057600080fd5b50565b600081359050613e6281613e3c565b92915050565b600060208284031215613e7e57613e7d613614565b5b6000613e8c84828501613e53565b91505092915050565b613e9e81613a91565b8114613ea957600080fd5b50565b600081359050613ebb81613e95565b92915050565b60008060008060808587031215613edb57613eda613614565b5b6000613ee987828801613e53565b9450506020613efa87828801613e53565b9350506040613f0b87828801613e53565b9250506060613f1c87828801613eac565b91505092959194509250565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000613f6f602083613f28565b9150613f7a82613f39565b602082019050919050565b60006020820190508181036000830152613f9e81613f62565b9050919050565b6000604082019050613fba6000830185613718565b613fc76020830184613718565b9392505050565b6000604082019050613fe36000830185613b1b565b613ff06020830184613718565b9392505050565b61400081613b45565b811461400b57600080fd5b50565b60008151905061401d81613ff7565b92915050565b60006020828403121561403957614038613614565b5b60006140478482850161400e565b91505092915050565b7f4d617267696e426173653a207769746864726177206661696c65640000000000600082015250565b6000614086601b83613f28565b915061409182614050565b602082019050919050565b600060208201905081810360008301526140b581614079565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006140f68261370e565b91506141018361370e565b925082821015614114576141136140bc565b5b828203905092915050565b60008151905061412e81613e95565b92915050565b60006020828403121561414a57614149613614565b5b60006141588482850161411f565b91505092915050565b60008151905061417081613742565b92915050565b60006020828403121561418c5761418b613614565b5b600061419a84828501614161565b91505092915050565b7f43616e6e6f7420696e697469616c697a6520696d706c656d656e746174696f6e600082015250565b60006141d9602083613f28565b91506141e4826141a3565b602082019050919050565b60006020820190508181036000830152614208816141cc565b9050919050565b7f416c726561647920696e697469616c697a656400000000000000000000000000600082015250565b6000614245601383613f28565b91506142508261420f565b602082019050919050565b6000602082019050818103600083015261427481614238565b9050919050565b7f4f707352656164793a206f6e6c794f7073000000000000000000000000000000600082015250565b60006142b1601183613f28565b91506142bc8261427b565b602082019050919050565b600060208201905081810360008301526142e0816142a4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905061432581613e3c565b92915050565b6000806040838503121561434257614341613614565b5b600061435085828601614161565b925050602061436185828601614316565b9150509250929050565b60006060820190506143806000830186613b1b565b61438d6020830185613b1b565b61439a6040830184613718565b949350505050565b7f4d617267696e426173653a206465706f736974206661696c6564000000000000600082015250565b60006143d8601a83613f28565b91506143e3826143a2565b602082019050919050565b60006020820190508181036000830152614407816143cb565b9050919050565b600081905092915050565b50565b600061442960008361440e565b915061443482614419565b600082019050919050565b600061444a8261441c565b9150819050919050565b600061ffff82169050919050565b600061446d82614454565b915061ffff8203614481576144806140bc565b5b600182019050919050565b60006144978261370e565b91506144a28361370e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156144d7576144d66140bc565b5b828201905092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614517816144e2565b82525050565b600060a0820190506145326000830188613b1b565b61453f602083018761450e565b61454c6040830186613b1b565b818103606083015261455e8185613baf565b905061456d6080830184613b1b565b9695505050505050565b60008151905061458681613628565b92915050565b6000602082840312156145a2576145a1613614565b5b60006145b084828501614577565b91505092915050565b60006145c48261370e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036145f6576145f56140bc565b5b600182019050919050565b6000819050919050565b600061462661462161461c84614601565b613a17565b61370e565b9050919050565b6146368161460b565b82525050565b60006060820190506146516000830186613681565b61465e602083018561462d565b61466b6040830184613681565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006146cf602683613f28565b91506146da82614673565b604082019050919050565b600060208201905081810360008301526146fe816146c2565b9050919050565b7f4d617267696e426173653a20436f756c64206e6f74206765742046757475726560008201527f73204d61726b6574204d616e6167657200000000000000000000000000000000602082015250565b6000614761603083613f28565b915061476c82614705565b604082019050919050565b600060408201905061478c6000830184613681565b818103602083015261479d81614754565b905092915050565b6000602082840312156147bb576147ba613614565b5b60006147c984828501614316565b91505092915050565b600060ff82169050919050565b60006147ea826147d2565b915060ff82036147fd576147fc6140bc565b5b600182019050919050565b60006148138261370e565b915061481e8361370e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614857576148566140bc565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061489c8261370e565b91506148a78361370e565b9250826148b7576148b6614862565b5b828204905092915050565b7f4d617267696e426173653a20756e61626c6520746f2070617920666565000000600082015250565b60006148f8601d83613f28565b9150614903826148c2565b602082019050919050565b60006020820190508181036000830152614927816148eb565b9050919050565b600061493982613862565b91507f8000000000000000000000000000000000000000000000000000000000000000820361496b5761496a6140bc565b5b816000039050919050565b7f5f7472616e736665723a20455448207472616e73666572206661696c65640000600082015250565b60006149ac601e83613f28565b91506149b782614976565b602082019050919050565b600060208201905081810360008301526149db8161499f565b9050919050565b7f45786368616e6765526174657300000000000000000000000000000000000000815250565b7f4d617267696e426173653a20436f756c64206e6f74206765742045786368616e60008201527f6765526174657300000000000000000000000000000000000000000000000000602082015250565b6000614a64602783613f28565b9150614a6f82614a08565b604082019050919050565b6000604082019050614a8e600083016149e2565b8181036020830152614a9f81614a57565b9050919050565b6000606082019050614abb6000830186613681565b614ac86020830185613718565b614ad56040830184613681565b949350505050565b6000604082019050614af26000830185613c18565b614aff6020830184613681565b9392505050565b6000602082019050614b1b6000830184613c18565b92915050565b600067ffffffffffffffff82169050919050565b614b3e81614b21565b8114614b4957600080fd5b50565b600081519050614b5b81614b35565b92915050565b614b6a81613690565b8114614b7557600080fd5b50565b600081519050614b8781614b61565b92915050565b614b96816136bb565b8114614ba157600080fd5b50565b600081519050614bb381614b8d565b92915050565b600080600080600060a08688031215614bd557614bd4613614565b5b6000614be388828901614b4c565b9550506020614bf488828901614b4c565b9450506040614c0588828901614b78565b9350506060614c1688828901614b78565b9250506080614c2788828901614ba4565b9150509295509295909350565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000614c90602a83613f28565b9150614c9b82614c34565b604082019050919050565b60006020820190508181036000830152614cbf81614c83565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614d51602683613f28565b9150614d5c82614cf5565b604082019050919050565b60006020820190508181036000830152614d8081614d44565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614dbd601d83613f28565b9150614dc882614d87565b602082019050919050565b60006020820190508181036000830152614dec81614db0565b9050919050565b6000614dfe82613b60565b614e08818561440e565b9350614e18818560208601613b7c565b80840191505092915050565b6000614e308284614df3565b915081905092915050565b600081519050919050565b6000614e5182614e3b565b614e5b8185613f28565b9350614e6b818560208601613b7c565b614e74816137a0565b840191505092915050565b60006020820190508181036000830152614e998184614e46565b90509291505056fea26469706673582212207c17123d3d2eec4fb4a072d8778b783d577ac978e1f17f42239ab9ed8c46278864736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80635c60da1b1161005b5780635c60da1b146100dc57806382689cae146100fa578063bf335e6214610118578063e70abe92146101365761007d565b806305a2ee2a1461008257806334b366f9146100a057806354fd4d50146100be575b600080fd5b61008a610154565b60405161009791906105df565b60405180910390f35b6100a8610178565b6040516100b591906105df565b60405180910390f35b6100c661019e565b6040516100d39190610693565b60405180910390f35b6100e461022c565b6040516100f19190610714565b60405180910390f35b610102610250565b60405161010f9190610750565b60405180910390f35b610120610274565b60405161012d91906105df565b60405180910390f35b61013e61048b565b60405161014b919061078c565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080546101ab906107d6565b80601f01602080910402602001604051908101604052809291908181526020018280546101d7906107d6565b80156102245780601f106101f957610100808354040283529160200191610224565b820191906000526020600020905b81548152906001019060200180831161020757829003601f168201915b505050505081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806102d67f00000000000000000000000000000000000000000000000000000000000000006040518060400160405280601081526020017f4372656174696f6e206661696c757265000000000000000000000000000000008152506104af565b90508073ffffffffffffffffffffffffffffffffffffffff1663f8c8765e7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff167f00000000000000000000000000000000000000000000000000000000000000006040518563ffffffff1660e01b81526004016103999493929190610807565b600060405180830381600087803b1580156103b357600080fd5b505af11580156103c7573d6000803e3d6000fd5b505050508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b815260040161040491906105df565b600060405180830381600087803b15801561041e57600080fd5b505af1158015610432573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f14cb25cca821184a88389fa7823ef6a4cd65897a89cbdcf5169542b8d790478b8260405161047c91906105df565b60405180910390a28091505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806104bb84610543565b90506037602082016000f09150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415839061053b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105329190610693565b60405180910390fd5b505092915050565b6060693d602d80600a3d3981f360b01b69363d3d373d3d3d363d7360b01b836e5af43d82803e903d91602b57fd5bf360881b604051602001610588949392919061092e565b6040516020818303038152906040529050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105c98261059e565b9050919050565b6105d9816105be565b82525050565b60006020820190506105f460008301846105d0565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610634578082015181840152602081019050610619565b83811115610643576000848401525b50505050565b6000601f19601f8301169050919050565b6000610665826105fa565b61066f8185610605565b935061067f818560208601610616565b61068881610649565b840191505092915050565b600060208201905081810360008301526106ad818461065a565b905092915050565b6000819050919050565b60006106da6106d56106d08461059e565b6106b5565b61059e565b9050919050565b60006106ec826106bf565b9050919050565b60006106fe826106e1565b9050919050565b61070e816106f3565b82525050565b60006020820190506107296000830184610705565b92915050565b600061073a826106e1565b9050919050565b61074a8161072f565b82525050565b60006020820190506107656000830184610741565b92915050565b60006107768261059e565b9050919050565b6107868161076b565b82525050565b60006020820190506107a1600083018461077d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806107ee57607f821691505b602082108103610801576108006107a7565b5b50919050565b600060808201905061081c60008301876105d0565b61082960208301866105d0565b61083660408301856105d0565b610843606083018461077d565b95945050505050565b60007fffffffffffffffffffff0000000000000000000000000000000000000000000082169050919050565b6000819050919050565b61089361088e8261084c565b610878565b82525050565b60008160601b9050919050565b60006108b182610899565b9050919050565b60006108c3826108a6565b9050919050565b6108db6108d6826105be565b6108b8565b82525050565b60007fffffffffffffffffffffffffffffff000000000000000000000000000000000082169050919050565b6000819050919050565b610928610923826108e1565b61090d565b82525050565b600061093a8287610882565b600a8201915061094a8286610882565b600a8201915061095a82856108ca565b60148201915061096a8284610917565b600f820191508190509594505050505056fea2646970667358221220cef86e61639c9d14de8b82b2cfa88a3fd03e9943611cc9b4d1a3cc255a1131e464736f6c634300080d0033",
  "devdoc": {
    "author": "JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_addressResolver": ": contract address for synthetix address resolver",
          "_marginAsset": ": token contract address used for account margin",
          "_marginBaseSettings": ": contract address for MarginBase account settings",
          "_ops": ": contract address for gelato ops -- must be payable",
          "_version": ": version of contract"
        }
      },
      "newAccount()": {
        "details": "this contract is the initial owner of cloned MarginBase, but ownership is transferred after successful initialization"
      }
    },
    "title": "Kwenta MarginBase Factory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addressResolver()": {
        "notice": "synthetix address resolver"
      },
      "constructor": {
        "notice": "deploy MarginBase implementation to later be cloned"
      },
      "implementation()": {
        "notice": "MarginBase contract acting as user's account"
      },
      "marginAsset()": {
        "notice": "ERC20 token used to interact with markets"
      },
      "marginBaseSettings()": {
        "notice": "settings for MarginBase accounts"
      },
      "newAccount()": {
        "notice": "clone MarginBase (i.e. create new account for user)"
      },
      "ops()": {
        "notice": "gelato ops"
      }
    },
    "notice": "Factory which enables deploying a MarginBase account for any user ",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 733,
        "contract": "contracts/MarginAccountFactory.sol:MarginAccountFactory",
        "label": "version",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 747,
        "contract": "contracts/MarginAccountFactory.sol:MarginAccountFactory",
        "label": "marginBaseSettings",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}