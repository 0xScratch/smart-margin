{
  "address": "0xC7E11CB9fE5FEa11357419f2245A621d2b17C561",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tradeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_limitOrderFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stopOrderFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DuplicateAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DuplicateFee",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "InvalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "LimitOrderFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "StopOrderFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "TradeFeeChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasuryAddressChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "limitOrderFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setLimitOrderFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setStopOrderFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "setTradeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopOrderFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ac56e982604c6ff870cd9e774370c9bb3ed7c28817f72d97e25e2010617b76f",
  "receipt": {
    "to": null,
    "from": "0x652c46a302060B324A02d2d3e4a56e3DA07FA91b",
    "contractAddress": "0xC7E11CB9fE5FEa11357419f2245A621d2b17C561",
    "transactionIndex": 0,
    "gasUsed": "878541",
    "logsBloom": "0x00000000000000000000000000000000800000000000000000800000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000001000000000008000000000000000000000000020000020000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000001000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x74c5fb70f52f935872b40389c6d27f5f1132c571471cd722fdbd39acc88da1f4",
    "transactionHash": "0x4ac56e982604c6ff870cd9e774370c9bb3ed7c28817f72d97e25e2010617b76f",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2087450,
        "transactionHash": "0x4ac56e982604c6ff870cd9e774370c9bb3ed7c28817f72d97e25e2010617b76f",
        "address": "0xC7E11CB9fE5FEa11357419f2245A621d2b17C561",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000652c46a302060b324a02d2d3e4a56e3da07fa91b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x74c5fb70f52f935872b40389c6d27f5f1132c571471cd722fdbd39acc88da1f4"
      }
    ],
    "blockNumber": 2087450,
    "cumulativeGasUsed": "878541",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6e1768574dC439aE6ffCd2b0A0f218105f2612c6",
    5,
    5,
    5
  ],
  "numDeployments": 1,
  "solcInputHash": "d40c36864e3032921bb5427fc0f519a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tradeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limitOrderFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stopOrderFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DuplicateAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DuplicateFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"InvalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"LimitOrderFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"StopOrderFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"TradeFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryAddressChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"limitOrderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setLimitOrderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setStopOrderFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setTradeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopOrderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\",\"details\":\"This contract will require deployment prior to MarginBase account creation\",\"errors\":{\"InvalidFee(uint256)\":[{\"params\":{\"fee\":\": fee denoted in BPS\"}}]},\"events\":{\"LimitOrderFeeChanged(uint256)\":{\"params\":{\"fee\":\": fee denoted in BPS\"}},\"StopOrderFeeChanged(uint256)\":{\"params\":{\"fee\":\": fee denoted in BPS\"}},\"TradeFeeChanged(uint256)\":{\"params\":{\"fee\":\": fee denoted in BPS\"}},\"TreasuryAddressChanged(address)\":{\"params\":{\"treasury\":\": new treasury address\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_limitOrderFee\":\": fee denoted in BPS\",\"_stopOrderFee\":\": fee denoted in BPS\",\"_tradeFee\":\": fee denoted in BPS\",\"_treasury\":\": Kwenta's Treasury Address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setLimitOrderFee(uint256)\":{\"params\":{\"_fee\":\": fee denoted in BPS\"}},\"setStopOrderFee(uint256)\":{\"params\":{\"_fee\":\": fee denoted in BPS\"}},\"setTradeFee(uint256)\":{\"params\":{\"_fee\":\": fee denoted in BPS\"}},\"setTreasury(address)\":{\"params\":{\"_treasury\":\": new treasury address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"limitOrderFee\":{\"details\":\"fee imposed on limit orders\"},\"stopOrderFee\":{\"details\":\"fee imposed on stop losses\"},\"tradeFee\":{\"details\":\"fee imposed on all tradestrades: defined as changes made to IMarginBaseTypes.ActiveMarketPosition.size\"}},\"title\":\"Kwenta Settings for MarginBase Accounts\",\"version\":1},\"userdoc\":{\"errors\":{\"DuplicateAddress()\":[{\"notice\":\"new address cannot be the same as the old address\"}],\"DuplicateFee()\":[{\"notice\":\"new fee cannot be the same as the old fee\"}],\"InvalidFee(uint256)\":[{\"notice\":\"invalid fee (fee > MAX_BPS)\"}],\"ZeroAddress()\":[{\"notice\":\"zero address cannot be used\"}]},\"events\":{\"LimitOrderFeeChanged(uint256)\":{\"notice\":\"emitted after a successful limit order fee change\"},\"StopOrderFeeChanged(uint256)\":{\"notice\":\"emitted after a successful stop loss fee change\"},\"TradeFeeChanged(uint256)\":{\"notice\":\"emitted after a successful trade fee change\"},\"TreasuryAddressChanged(address)\":{\"notice\":\"emitted after changing treasury address\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"set initial margin base account fees\"},\"limitOrderFee()\":{\"notice\":\"denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)\"},\"setLimitOrderFee(uint256)\":{\"notice\":\"set new limit order fee\"},\"setStopOrderFee(uint256)\":{\"notice\":\"set new stop loss fee\"},\"setTradeFee(uint256)\":{\"notice\":\"set new trade fee\"},\"setTreasury(address)\":{\"notice\":\"set new treasury address\"},\"stopOrderFee()\":{\"notice\":\"denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)\"},\"tradeFee()\":{\"notice\":\"denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)\"}},\"notice\":\"Contract (owned by the deployer) for controlling the settings of MarginBase account(s)\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarginBaseSettings.sol\":\"MarginBaseSettings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/MarginBaseSettings.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Kwenta Settings for MarginBase Accounts\\n/// @author JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)\\n/// @notice Contract (owned by the deployer) for controlling the settings of MarginBase account(s)\\n/// @dev This contract will require deployment prior to MarginBase account creation\\ncontract MarginBaseSettings is Ownable {\\n    /*///////////////////////////////////////////////////////////////\\n                                Constants\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice max BPS; used for decimals calculations\\n    uint256 private constant MAX_BPS = 10000;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                        Settings\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    // @notice Kwenta's Treasury Address\\n    address public treasury;\\n\\n    /// @notice denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)\\n    /// @dev fee imposed on all trades\\n    /// @dev trades: defined as changes made to IMarginBaseTypes.ActiveMarketPosition.size\\n    uint256 public tradeFee;\\n\\n    /// @notice denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)\\n    /// @dev fee imposed on limit orders\\n    uint256 public limitOrderFee;\\n\\n    /// @notice denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)\\n    /// @dev fee imposed on stop losses\\n    uint256 public stopOrderFee;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Events\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice emitted after changing treasury address\\n    /// @param treasury: new treasury address\\n    event TreasuryAddressChanged(address treasury);\\n\\n    /// @notice emitted after a successful trade fee change\\n    /// @param fee: fee denoted in BPS\\n    event TradeFeeChanged(uint256 fee);\\n\\n    /// @notice emitted after a successful limit order fee change\\n    /// @param fee: fee denoted in BPS\\n    event LimitOrderFeeChanged(uint256 fee);\\n\\n    /// @notice emitted after a successful stop loss fee change\\n    /// @param fee: fee denoted in BPS\\n    event StopOrderFeeChanged(uint256 fee);\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Errors\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice zero address cannot be used\\n    error ZeroAddress();\\n\\n    /// @notice invalid fee (fee > MAX_BPS)\\n    /// @param fee: fee denoted in BPS\\n    error InvalidFee(uint256 fee);\\n\\n    /// @notice new fee cannot be the same as the old fee\\n    error DuplicateFee();\\n\\n    /// @notice new address cannot be the same as the old address\\n    error DuplicateAddress();\\n\\n    /*///////////////////////////////////////////////////////////////\\n                            Constructor\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice set initial margin base account fees\\n    /// @param _treasury: Kwenta's Treasury Address\\n    /// @param _tradeFee: fee denoted in BPS\\n    /// @param _limitOrderFee: fee denoted in BPS\\n    /// @param _stopOrderFee: fee denoted in BPS\\n    constructor(\\n        address _treasury,\\n        uint256 _tradeFee,\\n        uint256 _limitOrderFee,\\n        uint256 _stopOrderFee\\n    ) {\\n        /// @notice ensure valid address for Kwenta Treasury\\n        if (_treasury == address(0)) revert ZeroAddress();\\n\\n        /// @notice set Kwenta Treasury address\\n        treasury = _treasury;\\n\\n        /// @notice ensure valid fees\\n        if (_tradeFee > MAX_BPS) revert InvalidFee(_tradeFee);\\n        if (_limitOrderFee > MAX_BPS) revert InvalidFee(_limitOrderFee);\\n        if (_stopOrderFee > MAX_BPS) revert InvalidFee(_stopOrderFee);\\n\\n        /// @notice set initial fees\\n        tradeFee = _tradeFee;\\n        limitOrderFee = _limitOrderFee;\\n        stopOrderFee = _stopOrderFee;\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                                Setters\\n    ///////////////////////////////////////////////////////////////*/\\n\\n    /// @notice set new treasury address\\n    /// @param _treasury: new treasury address\\n    function setTreasury(address _treasury) external onlyOwner {\\n        /// @notice ensure valid address for Kwenta Treasury\\n        if (_treasury == address(0)) revert ZeroAddress();\\n\\n        // @notice ensure address will change\\n        if (_treasury == treasury) revert DuplicateAddress();\\n\\n        /// @notice set Kwenta Treasury address\\n        treasury = _treasury;\\n\\n        emit TreasuryAddressChanged(_treasury);\\n    }\\n\\n    /// @notice set new trade fee\\n    /// @param _fee: fee denoted in BPS\\n    function setTradeFee(uint256 _fee) external onlyOwner {\\n        /// @notice ensure valid fee\\n        if (_fee > MAX_BPS) revert InvalidFee(_fee);\\n\\n        // @notice ensure fee will change\\n        if (_fee == tradeFee) revert DuplicateFee();\\n\\n        /// @notice set fee\\n        tradeFee = _fee;\\n\\n        emit TradeFeeChanged(_fee);\\n    }\\n\\n    /// @notice set new limit order fee\\n    /// @param _fee: fee denoted in BPS\\n    function setLimitOrderFee(uint256 _fee) external onlyOwner {\\n        /// @notice ensure valid fee\\n        if (_fee > MAX_BPS) revert InvalidFee(_fee);\\n\\n        // @notice ensure fee will change\\n        if (_fee == limitOrderFee) revert DuplicateFee();\\n\\n        /// @notice set fee\\n        limitOrderFee = _fee;\\n\\n        emit LimitOrderFeeChanged(_fee);\\n    }\\n\\n    /// @notice set new stop loss fee\\n    /// @param _fee: fee denoted in BPS\\n    function setStopOrderFee(uint256 _fee) external onlyOwner {\\n        /// @notice ensure valid fee\\n        if (_fee > MAX_BPS) revert InvalidFee(_fee);\\n\\n        // @notice ensure fee will change\\n        if (_fee == stopOrderFee) revert DuplicateFee();\\n\\n        /// @notice set fee\\n        stopOrderFee = _fee;\\n\\n        emit StopOrderFeeChanged(_fee);\\n    }\\n}\\n\",\"keccak256\":\"0xa1d13a84c7a4e85ad91a7d2b44cdf39ae7ac629c6f253cfa45a62639fcb6853c\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010d0380380620010d083398181016040528101906200003791906200036d565b620000576200004b620001fc60201b60201c565b6200020460201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603620000be576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506127108311156200014957826040517f2f38c6ee000000000000000000000000000000000000000000000000000000008152600401620001409190620003f0565b60405180910390fd5b6127108211156200019357816040517f2f38c6ee0000000000000000000000000000000000000000000000000000000081526004016200018a9190620003f0565b60405180910390fd5b612710811115620001dd57806040517f2f38c6ee000000000000000000000000000000000000000000000000000000008152600401620001d49190620003f0565b60405180910390fd5b826002819055508160038190555080600481905550505050506200040d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002fa82620002cd565b9050919050565b6200030c81620002ed565b81146200031857600080fd5b50565b6000815190506200032c8162000301565b92915050565b6000819050919050565b620003478162000332565b81146200035357600080fd5b50565b60008151905062000367816200033c565b92915050565b600080600080608085870312156200038a5762000389620002c8565b5b60006200039a878288016200031b565b9450506020620003ad8782880162000356565b9350506040620003c08782880162000356565b9250506060620003d38782880162000356565b91505092959194509250565b620003ea8162000332565b82525050565b6000602082019050620004076000830184620003df565b92915050565b610cb3806200041d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806361d027b31161007157806361d027b31461013e578063715018a61461015c5780638da5cb5b14610166578063d45152c814610184578063f0f44260146101a2578063f2fde38b146101be576100a9565b806310603023146100ae57806324bcdfbd146100ca57806327ca1009146100e8578063458edd74146101065780635ca22ef114610122575b600080fd5b6100c860048036038101906100c39190610a62565b6101da565b005b6100d2610319565b6040516100df9190610a9e565b60405180910390f35b6100f061031f565b6040516100fd9190610a9e565b60405180910390f35b610120600480360381019061011b9190610a62565b610325565b005b61013c60048036038101906101379190610a62565b610464565b005b6101466105a3565b6040516101539190610afa565b60405180910390f35b6101646105c9565b005b61016e610651565b60405161017b9190610afa565b60405180910390f35b61018c61067a565b6040516101999190610a9e565b60405180910390f35b6101bc60048036038101906101b79190610b41565b610680565b005b6101d860048036038101906101d39190610b41565b610864565b005b6101e261095b565b73ffffffffffffffffffffffffffffffffffffffff16610200610651565b73ffffffffffffffffffffffffffffffffffffffff1614610256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024d90610bcb565b60405180910390fd5b61271081111561029d57806040517f2f38c6ee0000000000000000000000000000000000000000000000000000000081526004016102949190610a9e565b60405180910390fd5b60025481036102d8576040517f3deb4b2c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806002819055507ff0e2ab1868f9bae31bda39e0675a42ea0e3b42d3493c88758f0382bf0e9b04968160405161030e9190610a9e565b60405180910390a150565b60025481565b60035481565b61032d61095b565b73ffffffffffffffffffffffffffffffffffffffff1661034b610651565b73ffffffffffffffffffffffffffffffffffffffff16146103a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039890610bcb565b60405180910390fd5b6127108111156103e857806040517f2f38c6ee0000000000000000000000000000000000000000000000000000000081526004016103df9190610a9e565b60405180910390fd5b6003548103610423576040517f3deb4b2c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003819055507f64ad89be1344628009ffc29a2d5a09191c3ee4f4241b1ce6d52e4e877d9aede0816040516104599190610a9e565b60405180910390a150565b61046c61095b565b73ffffffffffffffffffffffffffffffffffffffff1661048a610651565b73ffffffffffffffffffffffffffffffffffffffff16146104e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d790610bcb565b60405180910390fd5b61271081111561052757806040517f2f38c6ee00000000000000000000000000000000000000000000000000000000815260040161051e9190610a9e565b60405180910390fd5b6004548103610562576040517f3deb4b2c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806004819055507f76055c439bea0101a3fad8714507fc4751ac0a669085888c707ead21de0bd4be816040516105989190610a9e565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105d161095b565b73ffffffffffffffffffffffffffffffffffffffff166105ef610651565b73ffffffffffffffffffffffffffffffffffffffff1614610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063c90610bcb565b60405180910390fd5b61064f6000610963565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60045481565b61068861095b565b73ffffffffffffffffffffffffffffffffffffffff166106a6610651565b73ffffffffffffffffffffffffffffffffffffffff16146106fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f390610bcb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610762576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107e9576040517f0a47c55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f9073dfac663173e64aa95665faedae52e2246f9bcdd3890fbfaf6733b46bba13816040516108599190610afa565b60405180910390a150565b61086c61095b565b73ffffffffffffffffffffffffffffffffffffffff1661088a610651565b73ffffffffffffffffffffffffffffffffffffffff16146108e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d790610bcb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361094f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094690610c5d565b60405180910390fd5b61095881610963565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b610a3f81610a2c565b8114610a4a57600080fd5b50565b600081359050610a5c81610a36565b92915050565b600060208284031215610a7857610a77610a27565b5b6000610a8684828501610a4d565b91505092915050565b610a9881610a2c565b82525050565b6000602082019050610ab36000830184610a8f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ae482610ab9565b9050919050565b610af481610ad9565b82525050565b6000602082019050610b0f6000830184610aeb565b92915050565b610b1e81610ad9565b8114610b2957600080fd5b50565b600081359050610b3b81610b15565b92915050565b600060208284031215610b5757610b56610a27565b5b6000610b6584828501610b2c565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610bb5602083610b6e565b9150610bc082610b7f565b602082019050919050565b60006020820190508181036000830152610be481610ba8565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c47602683610b6e565b9150610c5282610beb565b604082019050919050565b60006020820190508181036000830152610c7681610c3a565b905091905056fea2646970667358221220d46cad62d43ddd0c3d01b09eaf1da6744e5966d19d6e78d6dd542697028316e564736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806361d027b31161007157806361d027b31461013e578063715018a61461015c5780638da5cb5b14610166578063d45152c814610184578063f0f44260146101a2578063f2fde38b146101be576100a9565b806310603023146100ae57806324bcdfbd146100ca57806327ca1009146100e8578063458edd74146101065780635ca22ef114610122575b600080fd5b6100c860048036038101906100c39190610a62565b6101da565b005b6100d2610319565b6040516100df9190610a9e565b60405180910390f35b6100f061031f565b6040516100fd9190610a9e565b60405180910390f35b610120600480360381019061011b9190610a62565b610325565b005b61013c60048036038101906101379190610a62565b610464565b005b6101466105a3565b6040516101539190610afa565b60405180910390f35b6101646105c9565b005b61016e610651565b60405161017b9190610afa565b60405180910390f35b61018c61067a565b6040516101999190610a9e565b60405180910390f35b6101bc60048036038101906101b79190610b41565b610680565b005b6101d860048036038101906101d39190610b41565b610864565b005b6101e261095b565b73ffffffffffffffffffffffffffffffffffffffff16610200610651565b73ffffffffffffffffffffffffffffffffffffffff1614610256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024d90610bcb565b60405180910390fd5b61271081111561029d57806040517f2f38c6ee0000000000000000000000000000000000000000000000000000000081526004016102949190610a9e565b60405180910390fd5b60025481036102d8576040517f3deb4b2c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806002819055507ff0e2ab1868f9bae31bda39e0675a42ea0e3b42d3493c88758f0382bf0e9b04968160405161030e9190610a9e565b60405180910390a150565b60025481565b60035481565b61032d61095b565b73ffffffffffffffffffffffffffffffffffffffff1661034b610651565b73ffffffffffffffffffffffffffffffffffffffff16146103a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039890610bcb565b60405180910390fd5b6127108111156103e857806040517f2f38c6ee0000000000000000000000000000000000000000000000000000000081526004016103df9190610a9e565b60405180910390fd5b6003548103610423576040517f3deb4b2c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806003819055507f64ad89be1344628009ffc29a2d5a09191c3ee4f4241b1ce6d52e4e877d9aede0816040516104599190610a9e565b60405180910390a150565b61046c61095b565b73ffffffffffffffffffffffffffffffffffffffff1661048a610651565b73ffffffffffffffffffffffffffffffffffffffff16146104e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d790610bcb565b60405180910390fd5b61271081111561052757806040517f2f38c6ee00000000000000000000000000000000000000000000000000000000815260040161051e9190610a9e565b60405180910390fd5b6004548103610562576040517f3deb4b2c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806004819055507f76055c439bea0101a3fad8714507fc4751ac0a669085888c707ead21de0bd4be816040516105989190610a9e565b60405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6105d161095b565b73ffffffffffffffffffffffffffffffffffffffff166105ef610651565b73ffffffffffffffffffffffffffffffffffffffff1614610645576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063c90610bcb565b60405180910390fd5b61064f6000610963565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60045481565b61068861095b565b73ffffffffffffffffffffffffffffffffffffffff166106a6610651565b73ffffffffffffffffffffffffffffffffffffffff16146106fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f390610bcb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610762576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107e9576040517f0a47c55800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f9073dfac663173e64aa95665faedae52e2246f9bcdd3890fbfaf6733b46bba13816040516108599190610afa565b60405180910390a150565b61086c61095b565b73ffffffffffffffffffffffffffffffffffffffff1661088a610651565b73ffffffffffffffffffffffffffffffffffffffff16146108e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d790610bcb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361094f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094690610c5d565b60405180910390fd5b61095881610963565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b610a3f81610a2c565b8114610a4a57600080fd5b50565b600081359050610a5c81610a36565b92915050565b600060208284031215610a7857610a77610a27565b5b6000610a8684828501610a4d565b91505092915050565b610a9881610a2c565b82525050565b6000602082019050610ab36000830184610a8f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ae482610ab9565b9050919050565b610af481610ad9565b82525050565b6000602082019050610b0f6000830184610aeb565b92915050565b610b1e81610ad9565b8114610b2957600080fd5b50565b600081359050610b3b81610b15565b92915050565b600060208284031215610b5757610b56610a27565b5b6000610b6584828501610b2c565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610bb5602083610b6e565b9150610bc082610b7f565b602082019050919050565b60006020820190508181036000830152610be481610ba8565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c47602683610b6e565b9150610c5282610beb565b604082019050919050565b60006020820190508181036000830152610c7681610c3a565b905091905056fea2646970667358221220d46cad62d43ddd0c3d01b09eaf1da6744e5966d19d6e78d6dd542697028316e564736f6c634300080d0033",
  "devdoc": {
    "author": "JaredBorders (jaredborders@proton.me), JChiaramonte7 (jeremy@bytecode.llc)",
    "details": "This contract will require deployment prior to MarginBase account creation",
    "errors": {
      "InvalidFee(uint256)": [
        {
          "params": {
            "fee": ": fee denoted in BPS"
          }
        }
      ]
    },
    "events": {
      "LimitOrderFeeChanged(uint256)": {
        "params": {
          "fee": ": fee denoted in BPS"
        }
      },
      "StopOrderFeeChanged(uint256)": {
        "params": {
          "fee": ": fee denoted in BPS"
        }
      },
      "TradeFeeChanged(uint256)": {
        "params": {
          "fee": ": fee denoted in BPS"
        }
      },
      "TreasuryAddressChanged(address)": {
        "params": {
          "treasury": ": new treasury address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_limitOrderFee": ": fee denoted in BPS",
          "_stopOrderFee": ": fee denoted in BPS",
          "_tradeFee": ": fee denoted in BPS",
          "_treasury": ": Kwenta's Treasury Address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setLimitOrderFee(uint256)": {
        "params": {
          "_fee": ": fee denoted in BPS"
        }
      },
      "setStopOrderFee(uint256)": {
        "params": {
          "_fee": ": fee denoted in BPS"
        }
      },
      "setTradeFee(uint256)": {
        "params": {
          "_fee": ": fee denoted in BPS"
        }
      },
      "setTreasury(address)": {
        "params": {
          "_treasury": ": new treasury address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "limitOrderFee": {
        "details": "fee imposed on limit orders"
      },
      "stopOrderFee": {
        "details": "fee imposed on stop losses"
      },
      "tradeFee": {
        "details": "fee imposed on all tradestrades: defined as changes made to IMarginBaseTypes.ActiveMarketPosition.size"
      }
    },
    "title": "Kwenta Settings for MarginBase Accounts",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "DuplicateAddress()": [
        {
          "notice": "new address cannot be the same as the old address"
        }
      ],
      "DuplicateFee()": [
        {
          "notice": "new fee cannot be the same as the old fee"
        }
      ],
      "InvalidFee(uint256)": [
        {
          "notice": "invalid fee (fee > MAX_BPS)"
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "zero address cannot be used"
        }
      ]
    },
    "events": {
      "LimitOrderFeeChanged(uint256)": {
        "notice": "emitted after a successful limit order fee change"
      },
      "StopOrderFeeChanged(uint256)": {
        "notice": "emitted after a successful stop loss fee change"
      },
      "TradeFeeChanged(uint256)": {
        "notice": "emitted after a successful trade fee change"
      },
      "TreasuryAddressChanged(address)": {
        "notice": "emitted after changing treasury address"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "set initial margin base account fees"
      },
      "limitOrderFee()": {
        "notice": "denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)"
      },
      "setLimitOrderFee(uint256)": {
        "notice": "set new limit order fee"
      },
      "setStopOrderFee(uint256)": {
        "notice": "set new stop loss fee"
      },
      "setTradeFee(uint256)": {
        "notice": "set new trade fee"
      },
      "setTreasury(address)": {
        "notice": "set new treasury address"
      },
      "stopOrderFee()": {
        "notice": "denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)"
      },
      "tradeFee()": {
        "notice": "denoted in Basis points (BPS) (One basis point is equal to 1/100th of 1%)"
      }
    },
    "notice": "Contract (owned by the deployer) for controlling the settings of MarginBase account(s)",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/MarginBaseSettings.sol:MarginBaseSettings",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2718,
        "contract": "contracts/MarginBaseSettings.sol:MarginBaseSettings",
        "label": "treasury",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2721,
        "contract": "contracts/MarginBaseSettings.sol:MarginBaseSettings",
        "label": "tradeFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2724,
        "contract": "contracts/MarginBaseSettings.sol:MarginBaseSettings",
        "label": "limitOrderFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2727,
        "contract": "contracts/MarginBaseSettings.sol:MarginBaseSettings",
        "label": "stopOrderFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}